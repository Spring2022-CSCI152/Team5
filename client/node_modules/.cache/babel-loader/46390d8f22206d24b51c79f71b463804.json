{"ast":null,"code":"/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(';');\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var index = pair.indexOf('='); // skip things that don't look like key=value\n\n    if (index < 0) {\n      continue;\n    }\n\n    var key = pair.substring(0, index).trim(); // only assign once\n\n    if (undefined == obj[key]) {\n      var val = pair.substring(index + 1, pair.length).trim(); // quoted values\n\n      if (val[0] === '\"') {\n        val = val.slice(1, -1);\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io/node_modules/cookie/index.js"],"names":["exports","parse","serialize","decode","decodeURIComponent","encode","encodeURIComponent","fieldContentRegExp","str","options","TypeError","obj","opt","pairs","split","dec","i","length","pair","index","indexOf","key","substring","trim","undefined","val","slice","tryDecode","name","enc","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","e"],"mappings":"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","sourcesContent":["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(';')\r\n  var dec = opt.decode || decode;\r\n\r\n  for (var i = 0; i < pairs.length; i++) {\r\n    var pair = pairs[i];\r\n    var index = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (index < 0) {\r\n      continue;\r\n    }\r\n\r\n    var key = pair.substring(0, index).trim()\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      var val = pair.substring(index + 1, pair.length).trim()\r\n\r\n      // quoted values\r\n      if (val[0] === '\"') {\r\n        val = val.slice(1, -1)\r\n      }\r\n\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (typeof enc !== 'function') {\r\n    throw new TypeError('option encode is invalid');\r\n  }\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var str = name + '=' + value;\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n\r\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\r\n      throw new TypeError('option maxAge is invalid')\r\n    }\r\n\r\n    str += '; Max-Age=' + Math.floor(maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    str += '; Domain=' + opt.domain;\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    str += '; Path=' + opt.path;\r\n  }\r\n\r\n  if (opt.expires) {\r\n    if (typeof opt.expires.toUTCString !== 'function') {\r\n      throw new TypeError('option expires is invalid');\r\n    }\r\n\r\n    str += '; Expires=' + opt.expires.toUTCString();\r\n  }\r\n\r\n  if (opt.httpOnly) {\r\n    str += '; HttpOnly';\r\n  }\r\n\r\n  if (opt.secure) {\r\n    str += '; Secure';\r\n  }\r\n\r\n  if (opt.sameSite) {\r\n    var sameSite = typeof opt.sameSite === 'string'\r\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\r\n\r\n    switch (sameSite) {\r\n      case true:\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'lax':\r\n        str += '; SameSite=Lax';\r\n        break;\r\n      case 'strict':\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'none':\r\n        str += '; SameSite=None';\r\n        break;\r\n      default:\r\n        throw new TypeError('option sameSite is invalid');\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}