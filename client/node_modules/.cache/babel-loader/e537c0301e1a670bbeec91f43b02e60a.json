{"ast":null,"code":"/*!\r\n * accepts\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar Negotiator = require('negotiator');\n\nvar mime = require('mime-types');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = Accepts;\n/**\r\n * Create a new Accepts object for the given req.\r\n *\r\n * @param {object} req\r\n * @public\r\n */\n\nfunction Accepts(req) {\n  if (!(this instanceof Accepts)) {\n    return new Accepts(req);\n  }\n\n  this.headers = req.headers;\n  this.negotiator = new Negotiator(req);\n}\n/**\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single mime type string\r\n * such as \"application/json\", the extension name\r\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *     this.types('text/html');\r\n *     // => \"text/html\"\r\n *     this.types('json', 'text');\r\n *     // => \"json\"\r\n *     this.types('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('image/png');\r\n *     this.types('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     this.types(['html', 'json']);\r\n *     this.types('html', 'json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\n\n\nAccepts.prototype.type = Accepts.prototype.types = function (types_) {\n  var types = types_; // support flattened arguments\n\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length);\n\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i];\n    }\n  } // no types, return all requested types\n\n\n  if (!types || types.length === 0) {\n    return this.negotiator.mediaTypes();\n  } // no accept header, return first given type\n\n\n  if (!this.headers.accept) {\n    return types[0];\n  }\n\n  var mimes = types.map(extToMime);\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));\n  var first = accepts[0];\n  return first ? types[mimes.indexOf(first)] : false;\n};\n/**\r\n * Return accepted encodings or best fit based on `encodings`.\r\n *\r\n * Given `Accept-Encoding: gzip, deflate`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['gzip', 'deflate']\r\n *\r\n * @param {String|Array} encodings...\r\n * @return {String|Array}\r\n * @public\r\n */\n\n\nAccepts.prototype.encoding = Accepts.prototype.encodings = function (encodings_) {\n  var encodings = encodings_; // support flattened arguments\n\n  if (encodings && !Array.isArray(encodings)) {\n    encodings = new Array(arguments.length);\n\n    for (var i = 0; i < encodings.length; i++) {\n      encodings[i] = arguments[i];\n    }\n  } // no encodings, return all requested encodings\n\n\n  if (!encodings || encodings.length === 0) {\n    return this.negotiator.encodings();\n  }\n\n  return this.negotiator.encodings(encodings)[0] || false;\n};\n/**\r\n * Return accepted charsets or best fit based on `charsets`.\r\n *\r\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['utf-8', 'utf-7', 'iso-8859-1']\r\n *\r\n * @param {String|Array} charsets...\r\n * @return {String|Array}\r\n * @public\r\n */\n\n\nAccepts.prototype.charset = Accepts.prototype.charsets = function (charsets_) {\n  var charsets = charsets_; // support flattened arguments\n\n  if (charsets && !Array.isArray(charsets)) {\n    charsets = new Array(arguments.length);\n\n    for (var i = 0; i < charsets.length; i++) {\n      charsets[i] = arguments[i];\n    }\n  } // no charsets, return all requested charsets\n\n\n  if (!charsets || charsets.length === 0) {\n    return this.negotiator.charsets();\n  }\n\n  return this.negotiator.charsets(charsets)[0] || false;\n};\n/**\r\n * Return accepted languages or best fit based on `langs`.\r\n *\r\n * Given `Accept-Language: en;q=0.8, es, pt`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['es', 'pt', 'en']\r\n *\r\n * @param {String|Array} langs...\r\n * @return {Array|String}\r\n * @public\r\n */\n\n\nAccepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function (languages_) {\n  var languages = languages_; // support flattened arguments\n\n  if (languages && !Array.isArray(languages)) {\n    languages = new Array(arguments.length);\n\n    for (var i = 0; i < languages.length; i++) {\n      languages[i] = arguments[i];\n    }\n  } // no languages, return all requested languages\n\n\n  if (!languages || languages.length === 0) {\n    return this.negotiator.languages();\n  }\n\n  return this.negotiator.languages(languages)[0] || false;\n};\n/**\r\n * Convert extnames to mime.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\n\n\nfunction extToMime(type) {\n  return type.indexOf('/') === -1 ? mime.lookup(type) : type;\n}\n/**\r\n * Check if mime is valid.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\n\n\nfunction validMime(type) {\n  return typeof type === 'string';\n}","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/accepts/index.js"],"names":["Negotiator","require","mime","module","exports","Accepts","req","headers","negotiator","prototype","type","types","types_","Array","isArray","arguments","length","i","mediaTypes","accept","mimes","map","extToMime","accepts","filter","validMime","first","indexOf","encoding","encodings","encodings_","charset","charsets","charsets_","lang","langs","language","languages","languages_","lookup"],"mappings":"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","sourcesContent":["/*!\r\n * accepts\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Negotiator = require('negotiator')\r\nvar mime = require('mime-types')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Accepts\r\n\r\n/**\r\n * Create a new Accepts object for the given req.\r\n *\r\n * @param {object} req\r\n * @public\r\n */\r\n\r\nfunction Accepts (req) {\r\n  if (!(this instanceof Accepts)) {\r\n    return new Accepts(req)\r\n  }\r\n\r\n  this.headers = req.headers\r\n  this.negotiator = new Negotiator(req)\r\n}\r\n\r\n/**\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single mime type string\r\n * such as \"application/json\", the extension name\r\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *     this.types('text/html');\r\n *     // => \"text/html\"\r\n *     this.types('json', 'text');\r\n *     // => \"json\"\r\n *     this.types('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('image/png');\r\n *     this.types('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     this.types(['html', 'json']);\r\n *     this.types('html', 'json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.type =\r\nAccepts.prototype.types = function (types_) {\r\n  var types = types_\r\n\r\n  // support flattened arguments\r\n  if (types && !Array.isArray(types)) {\r\n    types = new Array(arguments.length)\r\n    for (var i = 0; i < types.length; i++) {\r\n      types[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no types, return all requested types\r\n  if (!types || types.length === 0) {\r\n    return this.negotiator.mediaTypes()\r\n  }\r\n\r\n  // no accept header, return first given type\r\n  if (!this.headers.accept) {\r\n    return types[0]\r\n  }\r\n\r\n  var mimes = types.map(extToMime)\r\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime))\r\n  var first = accepts[0]\r\n\r\n  return first\r\n    ? types[mimes.indexOf(first)]\r\n    : false\r\n}\r\n\r\n/**\r\n * Return accepted encodings or best fit based on `encodings`.\r\n *\r\n * Given `Accept-Encoding: gzip, deflate`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['gzip', 'deflate']\r\n *\r\n * @param {String|Array} encodings...\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.encoding =\r\nAccepts.prototype.encodings = function (encodings_) {\r\n  var encodings = encodings_\r\n\r\n  // support flattened arguments\r\n  if (encodings && !Array.isArray(encodings)) {\r\n    encodings = new Array(arguments.length)\r\n    for (var i = 0; i < encodings.length; i++) {\r\n      encodings[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no encodings, return all requested encodings\r\n  if (!encodings || encodings.length === 0) {\r\n    return this.negotiator.encodings()\r\n  }\r\n\r\n  return this.negotiator.encodings(encodings)[0] || false\r\n}\r\n\r\n/**\r\n * Return accepted charsets or best fit based on `charsets`.\r\n *\r\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['utf-8', 'utf-7', 'iso-8859-1']\r\n *\r\n * @param {String|Array} charsets...\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.charset =\r\nAccepts.prototype.charsets = function (charsets_) {\r\n  var charsets = charsets_\r\n\r\n  // support flattened arguments\r\n  if (charsets && !Array.isArray(charsets)) {\r\n    charsets = new Array(arguments.length)\r\n    for (var i = 0; i < charsets.length; i++) {\r\n      charsets[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no charsets, return all requested charsets\r\n  if (!charsets || charsets.length === 0) {\r\n    return this.negotiator.charsets()\r\n  }\r\n\r\n  return this.negotiator.charsets(charsets)[0] || false\r\n}\r\n\r\n/**\r\n * Return accepted languages or best fit based on `langs`.\r\n *\r\n * Given `Accept-Language: en;q=0.8, es, pt`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['es', 'pt', 'en']\r\n *\r\n * @param {String|Array} langs...\r\n * @return {Array|String}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.lang =\r\nAccepts.prototype.langs =\r\nAccepts.prototype.language =\r\nAccepts.prototype.languages = function (languages_) {\r\n  var languages = languages_\r\n\r\n  // support flattened arguments\r\n  if (languages && !Array.isArray(languages)) {\r\n    languages = new Array(arguments.length)\r\n    for (var i = 0; i < languages.length; i++) {\r\n      languages[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no languages, return all requested languages\r\n  if (!languages || languages.length === 0) {\r\n    return this.negotiator.languages()\r\n  }\r\n\r\n  return this.negotiator.languages(languages)[0] || false\r\n}\r\n\r\n/**\r\n * Convert extnames to mime.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction extToMime (type) {\r\n  return type.indexOf('/') === -1\r\n    ? mime.lookup(type)\r\n    : type\r\n}\r\n\r\n/**\r\n * Check if mime is valid.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction validMime (type) {\r\n  return typeof type === 'string'\r\n}\r\n"]},"metadata":{},"sourceType":"script"}