{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\n\nconst transport_1 = require(\"../transport\");\n\nconst zlib_1 = require(\"zlib\");\n\nconst accepts = require(\"accepts\");\n\nconst debug_1 = require(\"debug\");\n\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n  gzip: zlib_1.createGzip,\n  deflate: zlib_1.createDeflate\n};\n\nclass Polling extends transport_1.Transport {\n  /**\r\n   * HTTP polling constructor.\r\n   *\r\n   * @api public.\r\n   */\n  constructor(req) {\n    super(req);\n    this.closeTimeout = 30 * 1000;\n  }\n  /**\r\n   * Transport name\r\n   *\r\n   * @api public\r\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n\n  get supportsFraming() {\n    return false;\n  }\n  /**\r\n   * Overrides onRequest.\r\n   *\r\n   * @param {http.IncomingMessage}\r\n   * @api private\r\n   */\n\n\n  onRequest(req) {\n    const res = req.res;\n\n    if (\"GET\" === req.method) {\n      this.onPollRequest(req, res);\n    } else if (\"POST\" === req.method) {\n      this.onDataRequest(req, res);\n    } else {\n      res.writeHead(500);\n      res.end();\n    }\n  }\n  /**\r\n   * The client sends a request awaiting for us to send data.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onPollRequest(req, res) {\n    if (this.req) {\n      debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n      this.onError(\"overlap from client\");\n      res.writeHead(500);\n      res.end();\n      return;\n    }\n\n    debug(\"setting request\");\n    this.req = req;\n    this.res = res;\n\n    const onClose = () => {\n      this.onError(\"poll connection closed prematurely\");\n    };\n\n    const cleanup = () => {\n      req.removeListener(\"close\", onClose);\n      this.req = this.res = null;\n    };\n\n    req.cleanup = cleanup;\n    req.on(\"close\", onClose);\n    this.writable = true;\n    this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n    if (this.writable && this.shouldClose) {\n      debug(\"triggering empty send to append close packet\");\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n  }\n  /**\r\n   * The client sends a request with data.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onDataRequest(req, res) {\n    if (this.dataReq) {\n      // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n      this.onError(\"data request overlap from client\");\n      res.writeHead(500);\n      res.end();\n      return;\n    }\n\n    const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n\n    if (isBinary && this.protocol === 4) {\n      return this.onError(\"invalid content\");\n    }\n\n    this.dataReq = req;\n    this.dataRes = res;\n    let chunks = isBinary ? Buffer.concat([]) : \"\";\n\n    const cleanup = () => {\n      req.removeListener(\"data\", onData);\n      req.removeListener(\"end\", onEnd);\n      req.removeListener(\"close\", onClose);\n      this.dataReq = this.dataRes = chunks = null;\n    };\n\n    const onClose = () => {\n      cleanup();\n      this.onError(\"data request connection closed prematurely\");\n    };\n\n    const onData = data => {\n      let contentLength;\n\n      if (isBinary) {\n        chunks = Buffer.concat([chunks, data]);\n        contentLength = chunks.length;\n      } else {\n        chunks += data;\n        contentLength = Buffer.byteLength(chunks);\n      }\n\n      if (contentLength > this.maxHttpBufferSize) {\n        chunks = isBinary ? Buffer.concat([]) : \"\";\n        req.connection.destroy();\n      }\n    };\n\n    const onEnd = () => {\n      this.onData(chunks);\n      const headers = {\n        // text/html is required instead of text/plain to avoid an\n        // unwanted download dialog on certain user-agents (GH-43)\n        \"Content-Type\": \"text/html\",\n        \"Content-Length\": 2\n      };\n      res.writeHead(200, this.headers(req, headers));\n      res.end(\"ok\");\n      cleanup();\n    };\n\n    req.on(\"close\", onClose);\n    if (!isBinary) req.setEncoding(\"utf8\");\n    req.on(\"data\", onData);\n    req.on(\"end\", onEnd);\n  }\n  /**\r\n   * Processes the incoming data payload.\r\n   *\r\n   * @param {String} encoded payload\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    debug('received \"%s\"', data);\n\n    const callback = packet => {\n      if (\"close\" === packet.type) {\n        debug(\"got xhr close packet\");\n        this.onClose();\n        return false;\n      }\n\n      this.onPacket(packet);\n    };\n\n    if (this.protocol === 3) {\n      this.parser.decodePayload(data, callback);\n    } else {\n      this.parser.decodePayload(data).forEach(callback);\n    }\n  }\n  /**\r\n   * Overrides onClose.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onClose() {\n    if (this.writable) {\n      // close pending poll request\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n\n    super.onClose();\n  }\n  /**\r\n   * Writes a packet payload.\r\n   *\r\n   * @param {Object} packet\r\n   * @api private\r\n   */\n\n\n  send(packets) {\n    this.writable = false;\n\n    if (this.shouldClose) {\n      debug(\"appending close packet to payload\");\n      packets.push({\n        type: \"close\"\n      });\n      this.shouldClose();\n      this.shouldClose = null;\n    }\n\n    const doWrite = data => {\n      const compress = packets.some(packet => {\n        return packet.options && packet.options.compress;\n      });\n      this.write(data, {\n        compress\n      });\n    };\n\n    if (this.protocol === 3) {\n      this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n    } else {\n      this.parser.encodePayload(packets, doWrite);\n    }\n  }\n  /**\r\n   * Writes data as response to poll request.\r\n   *\r\n   * @param {String} data\r\n   * @param {Object} options\r\n   * @api private\r\n   */\n\n\n  write(data, options) {\n    debug('writing \"%s\"', data);\n    this.doWrite(data, options, () => {\n      this.req.cleanup();\n    });\n  }\n  /**\r\n   * Performs the write.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doWrite(data, options, callback) {\n    // explicit UTF-8 is required for pages not served under utf\n    const isString = typeof data === \"string\";\n    const contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n    const headers = {\n      \"Content-Type\": contentType\n    };\n\n    const respond = data => {\n      headers[\"Content-Length\"] = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n      this.res.writeHead(200, this.headers(this.req, headers));\n      this.res.end(data);\n      callback();\n    };\n\n    if (!this.httpCompression || !options.compress) {\n      respond(data);\n      return;\n    }\n\n    const len = isString ? Buffer.byteLength(data) : data.length;\n\n    if (len < this.httpCompression.threshold) {\n      respond(data);\n      return;\n    }\n\n    const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n    if (!encoding) {\n      respond(data);\n      return;\n    }\n\n    this.compress(data, encoding, (err, data) => {\n      if (err) {\n        this.res.writeHead(500);\n        this.res.end();\n        callback(err);\n        return;\n      }\n\n      headers[\"Content-Encoding\"] = encoding;\n      respond(data);\n    });\n  }\n  /**\r\n   * Compresses data.\r\n   *\r\n   * @api private\r\n   */\n\n\n  compress(data, encoding, callback) {\n    debug(\"compressing\");\n    const buffers = [];\n    let nread = 0;\n    compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n      buffers.push(chunk);\n      nread += chunk.length;\n    }).on(\"end\", function () {\n      callback(null, Buffer.concat(buffers, nread));\n    }).end(data);\n  }\n  /**\r\n   * Closes the transport.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    let closeTimeoutTimer;\n\n    if (this.dataReq) {\n      debug(\"aborting ongoing data request\");\n      this.dataReq.destroy();\n    }\n\n    const onClose = () => {\n      clearTimeout(closeTimeoutTimer);\n      fn();\n      this.onClose();\n    };\n\n    if (this.writable) {\n      debug(\"transport writable - closing right away\");\n      this.send([{\n        type: \"close\"\n      }]);\n      onClose();\n    } else if (this.discarded) {\n      debug(\"transport discarded - closing right away\");\n      onClose();\n    } else {\n      debug(\"transport not writable - buffering orderly close\");\n      this.shouldClose = onClose;\n      closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n    }\n  }\n  /**\r\n   * Returns headers for a response.\r\n   *\r\n   * @param {http.IncomingMessage} request\r\n   * @param {Object} extra headers\r\n   * @api private\r\n   */\n\n\n  headers(req, headers) {\n    headers = headers || {}; // prevent XSS warnings on IE\n    // https://github.com/LearnBoost/socket.io/pull/1333\n\n    const ua = req.headers[\"user-agent\"];\n\n    if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n      headers[\"X-XSS-Protection\"] = \"0\";\n    }\n\n    this.emit(\"headers\", headers, req);\n    return headers;\n  }\n\n}\n\nexports.Polling = Polling;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io/build/transports/polling.js"],"names":["Object","defineProperty","exports","value","Polling","transport_1","require","zlib_1","accepts","debug_1","debug","default","compressionMethods","gzip","createGzip","deflate","createDeflate","Transport","constructor","req","closeTimeout","name","supportsFraming","onRequest","res","method","onPollRequest","onDataRequest","writeHead","end","onError","onClose","cleanup","removeListener","on","writable","emit","shouldClose","send","type","dataReq","isBinary","headers","protocol","dataRes","chunks","Buffer","concat","onData","onEnd","data","contentLength","length","byteLength","maxHttpBufferSize","connection","destroy","setEncoding","callback","packet","onPacket","parser","decodePayload","forEach","packets","push","doWrite","compress","some","options","write","encodePayload","supportsBinary","isString","contentType","respond","httpCompression","len","threshold","encoding","encodings","err","buffers","nread","chunk","doClose","fn","closeTimeoutTimer","clearTimeout","discarded","setTimeout","ua","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Polling = void 0;\r\nconst transport_1 = require(\"../transport\");\r\nconst zlib_1 = require(\"zlib\");\r\nconst accepts = require(\"accepts\");\r\nconst debug_1 = require(\"debug\");\r\nconst debug = (0, debug_1.default)(\"engine:polling\");\r\nconst compressionMethods = {\r\n    gzip: zlib_1.createGzip,\r\n    deflate: zlib_1.createDeflate\r\n};\r\nclass Polling extends transport_1.Transport {\r\n    /**\r\n     * HTTP polling constructor.\r\n     *\r\n     * @api public.\r\n     */\r\n    constructor(req) {\r\n        super(req);\r\n        this.closeTimeout = 30 * 1000;\r\n    }\r\n    /**\r\n     * Transport name\r\n     *\r\n     * @api public\r\n     */\r\n    get name() {\r\n        return \"polling\";\r\n    }\r\n    get supportsFraming() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Overrides onRequest.\r\n     *\r\n     * @param {http.IncomingMessage}\r\n     * @api private\r\n     */\r\n    onRequest(req) {\r\n        const res = req.res;\r\n        if (\"GET\" === req.method) {\r\n            this.onPollRequest(req, res);\r\n        }\r\n        else if (\"POST\" === req.method) {\r\n            this.onDataRequest(req, res);\r\n        }\r\n        else {\r\n            res.writeHead(500);\r\n            res.end();\r\n        }\r\n    }\r\n    /**\r\n     * The client sends a request awaiting for us to send data.\r\n     *\r\n     * @api private\r\n     */\r\n    onPollRequest(req, res) {\r\n        if (this.req) {\r\n            debug(\"request overlap\");\r\n            // assert: this.res, '.req and .res should be (un)set together'\r\n            this.onError(\"overlap from client\");\r\n            res.writeHead(500);\r\n            res.end();\r\n            return;\r\n        }\r\n        debug(\"setting request\");\r\n        this.req = req;\r\n        this.res = res;\r\n        const onClose = () => {\r\n            this.onError(\"poll connection closed prematurely\");\r\n        };\r\n        const cleanup = () => {\r\n            req.removeListener(\"close\", onClose);\r\n            this.req = this.res = null;\r\n        };\r\n        req.cleanup = cleanup;\r\n        req.on(\"close\", onClose);\r\n        this.writable = true;\r\n        this.emit(\"drain\");\r\n        // if we're still writable but had a pending close, trigger an empty send\r\n        if (this.writable && this.shouldClose) {\r\n            debug(\"triggering empty send to append close packet\");\r\n            this.send([{ type: \"noop\" }]);\r\n        }\r\n    }\r\n    /**\r\n     * The client sends a request with data.\r\n     *\r\n     * @api private\r\n     */\r\n    onDataRequest(req, res) {\r\n        if (this.dataReq) {\r\n            // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\r\n            this.onError(\"data request overlap from client\");\r\n            res.writeHead(500);\r\n            res.end();\r\n            return;\r\n        }\r\n        const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\r\n        if (isBinary && this.protocol === 4) {\r\n            return this.onError(\"invalid content\");\r\n        }\r\n        this.dataReq = req;\r\n        this.dataRes = res;\r\n        let chunks = isBinary ? Buffer.concat([]) : \"\";\r\n        const cleanup = () => {\r\n            req.removeListener(\"data\", onData);\r\n            req.removeListener(\"end\", onEnd);\r\n            req.removeListener(\"close\", onClose);\r\n            this.dataReq = this.dataRes = chunks = null;\r\n        };\r\n        const onClose = () => {\r\n            cleanup();\r\n            this.onError(\"data request connection closed prematurely\");\r\n        };\r\n        const onData = data => {\r\n            let contentLength;\r\n            if (isBinary) {\r\n                chunks = Buffer.concat([chunks, data]);\r\n                contentLength = chunks.length;\r\n            }\r\n            else {\r\n                chunks += data;\r\n                contentLength = Buffer.byteLength(chunks);\r\n            }\r\n            if (contentLength > this.maxHttpBufferSize) {\r\n                chunks = isBinary ? Buffer.concat([]) : \"\";\r\n                req.connection.destroy();\r\n            }\r\n        };\r\n        const onEnd = () => {\r\n            this.onData(chunks);\r\n            const headers = {\r\n                // text/html is required instead of text/plain to avoid an\r\n                // unwanted download dialog on certain user-agents (GH-43)\r\n                \"Content-Type\": \"text/html\",\r\n                \"Content-Length\": 2\r\n            };\r\n            res.writeHead(200, this.headers(req, headers));\r\n            res.end(\"ok\");\r\n            cleanup();\r\n        };\r\n        req.on(\"close\", onClose);\r\n        if (!isBinary)\r\n            req.setEncoding(\"utf8\");\r\n        req.on(\"data\", onData);\r\n        req.on(\"end\", onEnd);\r\n    }\r\n    /**\r\n     * Processes the incoming data payload.\r\n     *\r\n     * @param {String} encoded payload\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        debug('received \"%s\"', data);\r\n        const callback = packet => {\r\n            if (\"close\" === packet.type) {\r\n                debug(\"got xhr close packet\");\r\n                this.onClose();\r\n                return false;\r\n            }\r\n            this.onPacket(packet);\r\n        };\r\n        if (this.protocol === 3) {\r\n            this.parser.decodePayload(data, callback);\r\n        }\r\n        else {\r\n            this.parser.decodePayload(data).forEach(callback);\r\n        }\r\n    }\r\n    /**\r\n     * Overrides onClose.\r\n     *\r\n     * @api private\r\n     */\r\n    onClose() {\r\n        if (this.writable) {\r\n            // close pending poll request\r\n            this.send([{ type: \"noop\" }]);\r\n        }\r\n        super.onClose();\r\n    }\r\n    /**\r\n     * Writes a packet payload.\r\n     *\r\n     * @param {Object} packet\r\n     * @api private\r\n     */\r\n    send(packets) {\r\n        this.writable = false;\r\n        if (this.shouldClose) {\r\n            debug(\"appending close packet to payload\");\r\n            packets.push({ type: \"close\" });\r\n            this.shouldClose();\r\n            this.shouldClose = null;\r\n        }\r\n        const doWrite = data => {\r\n            const compress = packets.some(packet => {\r\n                return packet.options && packet.options.compress;\r\n            });\r\n            this.write(data, { compress });\r\n        };\r\n        if (this.protocol === 3) {\r\n            this.parser.encodePayload(packets, this.supportsBinary, doWrite);\r\n        }\r\n        else {\r\n            this.parser.encodePayload(packets, doWrite);\r\n        }\r\n    }\r\n    /**\r\n     * Writes data as response to poll request.\r\n     *\r\n     * @param {String} data\r\n     * @param {Object} options\r\n     * @api private\r\n     */\r\n    write(data, options) {\r\n        debug('writing \"%s\"', data);\r\n        this.doWrite(data, options, () => {\r\n            this.req.cleanup();\r\n        });\r\n    }\r\n    /**\r\n     * Performs the write.\r\n     *\r\n     * @api private\r\n     */\r\n    doWrite(data, options, callback) {\r\n        // explicit UTF-8 is required for pages not served under utf\r\n        const isString = typeof data === \"string\";\r\n        const contentType = isString\r\n            ? \"text/plain; charset=UTF-8\"\r\n            : \"application/octet-stream\";\r\n        const headers = {\r\n            \"Content-Type\": contentType\r\n        };\r\n        const respond = data => {\r\n            headers[\"Content-Length\"] =\r\n                \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\r\n            this.res.writeHead(200, this.headers(this.req, headers));\r\n            this.res.end(data);\r\n            callback();\r\n        };\r\n        if (!this.httpCompression || !options.compress) {\r\n            respond(data);\r\n            return;\r\n        }\r\n        const len = isString ? Buffer.byteLength(data) : data.length;\r\n        if (len < this.httpCompression.threshold) {\r\n            respond(data);\r\n            return;\r\n        }\r\n        const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\r\n        if (!encoding) {\r\n            respond(data);\r\n            return;\r\n        }\r\n        this.compress(data, encoding, (err, data) => {\r\n            if (err) {\r\n                this.res.writeHead(500);\r\n                this.res.end();\r\n                callback(err);\r\n                return;\r\n            }\r\n            headers[\"Content-Encoding\"] = encoding;\r\n            respond(data);\r\n        });\r\n    }\r\n    /**\r\n     * Compresses data.\r\n     *\r\n     * @api private\r\n     */\r\n    compress(data, encoding, callback) {\r\n        debug(\"compressing\");\r\n        const buffers = [];\r\n        let nread = 0;\r\n        compressionMethods[encoding](this.httpCompression)\r\n            .on(\"error\", callback)\r\n            .on(\"data\", function (chunk) {\r\n            buffers.push(chunk);\r\n            nread += chunk.length;\r\n        })\r\n            .on(\"end\", function () {\r\n            callback(null, Buffer.concat(buffers, nread));\r\n        })\r\n            .end(data);\r\n    }\r\n    /**\r\n     * Closes the transport.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose(fn) {\r\n        debug(\"closing\");\r\n        let closeTimeoutTimer;\r\n        if (this.dataReq) {\r\n            debug(\"aborting ongoing data request\");\r\n            this.dataReq.destroy();\r\n        }\r\n        const onClose = () => {\r\n            clearTimeout(closeTimeoutTimer);\r\n            fn();\r\n            this.onClose();\r\n        };\r\n        if (this.writable) {\r\n            debug(\"transport writable - closing right away\");\r\n            this.send([{ type: \"close\" }]);\r\n            onClose();\r\n        }\r\n        else if (this.discarded) {\r\n            debug(\"transport discarded - closing right away\");\r\n            onClose();\r\n        }\r\n        else {\r\n            debug(\"transport not writable - buffering orderly close\");\r\n            this.shouldClose = onClose;\r\n            closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\r\n        }\r\n    }\r\n    /**\r\n     * Returns headers for a response.\r\n     *\r\n     * @param {http.IncomingMessage} request\r\n     * @param {Object} extra headers\r\n     * @api private\r\n     */\r\n    headers(req, headers) {\r\n        headers = headers || {};\r\n        // prevent XSS warnings on IE\r\n        // https://github.com/LearnBoost/socket.io/pull/1333\r\n        const ua = req.headers[\"user-agent\"];\r\n        if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\r\n            headers[\"X-XSS-Protection\"] = \"0\";\r\n        }\r\n        this.emit(\"headers\", headers, req);\r\n        return headers;\r\n    }\r\n}\r\nexports.Polling = Polling;\r\n"]},"metadata":{},"sourceType":"script"}