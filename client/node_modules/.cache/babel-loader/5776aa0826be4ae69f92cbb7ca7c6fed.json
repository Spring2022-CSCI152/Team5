{"ast":null,"code":"/*!\r\n * vary\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n */\n\nmodule.exports = vary;\nmodule.exports.append = append;\n/**\r\n * RegExp to match field-name in RFC 7230 sec 3.2\r\n *\r\n * field-name    = token\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n */\n\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n/**\r\n * Append a field to a vary header.\r\n *\r\n * @param {String} header\r\n * @param {String|Array} field\r\n * @return {String}\r\n * @public\r\n */\n\nfunction append(header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required');\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required');\n  } // get fields array\n\n\n  var fields = !Array.isArray(field) ? parse(String(field)) : field; // assert on invalid field names\n\n  for (var j = 0; j < fields.length; j++) {\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\n      throw new TypeError('field argument contains an invalid header name');\n    }\n  } // existing, unspecified vary\n\n\n  if (header === '*') {\n    return header;\n  } // enumerate current values\n\n\n  var val = header;\n  var vals = parse(header.toLowerCase()); // unspecified vary\n\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*';\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase(); // append value (case-preserving)\n\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld);\n      val = val ? val + ', ' + fields[i] : fields[i];\n    }\n  }\n\n  return val;\n}\n/**\r\n * Parse a vary header into an array.\r\n *\r\n * @param {String} header\r\n * @return {Array}\r\n * @private\r\n */\n\n\nfunction parse(header) {\n  var end = 0;\n  var list = [];\n  var start = 0; // gather tokens\n\n  for (var i = 0, len = header.length; i < len; i++) {\n    switch (header.charCodeAt(i)) {\n      case 0x20:\n        /*   */\n        if (start === end) {\n          start = end = i + 1;\n        }\n\n        break;\n\n      case 0x2c:\n        /* , */\n        list.push(header.substring(start, end));\n        start = end = i + 1;\n        break;\n\n      default:\n        end = i + 1;\n        break;\n    }\n  } // final token\n\n\n  list.push(header.substring(start, end));\n  return list;\n}\n/**\r\n * Mark that a request is varied on a header field.\r\n *\r\n * @param {Object} res\r\n * @param {String|Array} field\r\n * @public\r\n */\n\n\nfunction vary(res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required');\n  } // get existing header\n\n\n  var val = res.getHeader('Vary') || '';\n  var header = Array.isArray(val) ? val.join(', ') : String(val); // set new header\n\n  if (val = append(header, field)) {\n    res.setHeader('Vary', val);\n  }\n}","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/vary/index.js"],"names":["module","exports","vary","append","FIELD_NAME_REGEXP","header","field","TypeError","fields","Array","isArray","parse","String","j","length","test","val","vals","toLowerCase","indexOf","i","fld","push","end","list","start","len","charCodeAt","substring","res","getHeader","setHeader","join"],"mappings":"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","sourcesContent":["/*!\r\n * vary\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = vary\r\nmodule.exports.append = append\r\n\r\n/**\r\n * RegExp to match field-name in RFC 7230 sec 3.2\r\n *\r\n * field-name    = token\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n */\r\n\r\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/\r\n\r\n/**\r\n * Append a field to a vary header.\r\n *\r\n * @param {String} header\r\n * @param {String|Array} field\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nfunction append (header, field) {\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('header argument is required')\r\n  }\r\n\r\n  if (!field) {\r\n    throw new TypeError('field argument is required')\r\n  }\r\n\r\n  // get fields array\r\n  var fields = !Array.isArray(field)\r\n    ? parse(String(field))\r\n    : field\r\n\r\n  // assert on invalid field names\r\n  for (var j = 0; j < fields.length; j++) {\r\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\r\n      throw new TypeError('field argument contains an invalid header name')\r\n    }\r\n  }\r\n\r\n  // existing, unspecified vary\r\n  if (header === '*') {\r\n    return header\r\n  }\r\n\r\n  // enumerate current values\r\n  var val = header\r\n  var vals = parse(header.toLowerCase())\r\n\r\n  // unspecified vary\r\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\r\n    return '*'\r\n  }\r\n\r\n  for (var i = 0; i < fields.length; i++) {\r\n    var fld = fields[i].toLowerCase()\r\n\r\n    // append value (case-preserving)\r\n    if (vals.indexOf(fld) === -1) {\r\n      vals.push(fld)\r\n      val = val\r\n        ? val + ', ' + fields[i]\r\n        : fields[i]\r\n    }\r\n  }\r\n\r\n  return val\r\n}\r\n\r\n/**\r\n * Parse a vary header into an array.\r\n *\r\n * @param {String} header\r\n * @return {Array}\r\n * @private\r\n */\r\n\r\nfunction parse (header) {\r\n  var end = 0\r\n  var list = []\r\n  var start = 0\r\n\r\n  // gather tokens\r\n  for (var i = 0, len = header.length; i < len; i++) {\r\n    switch (header.charCodeAt(i)) {\r\n      case 0x20: /*   */\r\n        if (start === end) {\r\n          start = end = i + 1\r\n        }\r\n        break\r\n      case 0x2c: /* , */\r\n        list.push(header.substring(start, end))\r\n        start = end = i + 1\r\n        break\r\n      default:\r\n        end = i + 1\r\n        break\r\n    }\r\n  }\r\n\r\n  // final token\r\n  list.push(header.substring(start, end))\r\n\r\n  return list\r\n}\r\n\r\n/**\r\n * Mark that a request is varied on a header field.\r\n *\r\n * @param {Object} res\r\n * @param {String|Array} field\r\n * @public\r\n */\r\n\r\nfunction vary (res, field) {\r\n  if (!res || !res.getHeader || !res.setHeader) {\r\n    // quack quack\r\n    throw new TypeError('res argument is required')\r\n  }\r\n\r\n  // get existing header\r\n  var val = res.getHeader('Vary') || ''\r\n  var header = Array.isArray(val)\r\n    ? val.join(', ')\r\n    : String(val)\r\n\r\n  // set new header\r\n  if ((val = append(header, field))) {\r\n    res.setHeader('Vary', val)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}