{"ast":null,"code":"// import React, { Component }  from 'react';\n// import \"./messenger.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n// import Conversation from \"../../components/conversations/Conversation\";\n// import Message from \"../../components/message/Message\";\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\n// import { useContext, useEffect, useRef, useState } from \"react\";\n// //import { AuthContext } from \"../../context/AuthContext\";\n// import axios from \"axios\";\n// //import { io } from \"socket.io-client\";\n// export default function Messenger() {\n//   const [conversations, setConversations] = useState([]);\n//   const [currentChat, setCurrentChat] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [arrivalMessage, setArrivalMessage] = useState(null);\n//   const [onlineUsers, setOnlineUsers] = useState([]);\n//   const socket = useRef();\n//   //const { user } = useContext(AuthContext);\n//   const scrollRef = useRef();\n//   useEffect(() => {\n//     socket.current = io(\"ws://localhost:8900\");\n//     socket.current.on(\"getMessage\", (data) => {\n//       setArrivalMessage({\n//         sender: data.senderId,\n//         text: data.text,\n//         createdAt: Date.now(),\n//       });\n//     });\n//   }, []);\n//   useEffect(() => {\n//     arrivalMessage &&\n//       currentChat?.members.includes(arrivalMessage.sender) &&\n//       setMessages((prev) => [...prev, arrivalMessage]);\n//   }, [arrivalMessage, currentChat]);\n//   // useEffect(() => {\n//   //   //socket.current.emit(\"addUser\", user._id);\n//   //   //socket.current.on(\"getUsers\", (users) => {\n//   //     setOnlineUsers(\n//   //       user.followings.filter((f) => users.some((u) => u.userId === f))\n//   //     );\n//   //   });\n//   // }, [user]);\n//   // useEffect(() => {\n//   //   const getConversations = async () => {\n//   //     try {\n//   //       const res = await axios.get(\"/conversations/\" + user._id);\n//   //       setConversations(res.data);\n//   //     } catch (err) {\n//   //       console.log(err);\n//   //     }\n//   //   };\n//     //getConversations();\n//   //}, [user._id]);\n//   useEffect(() => {\n//     const getMessages = async () => {\n//       try {\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\n//         setMessages(res.data);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//     getMessages();\n//   }, [currentChat]);\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const message = {\n//       //sender: user._id,\n//       text: newMessage,\n//       conversationId: currentChat._id,\n//     };\n//     const receiverId = currentChat.members.find(\n//      // (member) => member !== user._id\n//     );\n//     socket.current.emit(\"sendMessage\", {\n//       //senderId: user._id,\n//       receiverId,\n//       text: newMessage,\n//     });\n//     try {\n//       const res = await axios.post(\"/messages\", message);\n//       setMessages([...messages, res.data]);\n//       setNewMessage(\"\");\n//     } catch (err) {\n//       console.log(err);\n//     }\n//   };\n// //   useEffect(() => {scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n// //   }, [messages]);\n//   return (<>\n//       <Topbar />\n//       <div className=\"messenger\">\n//         <div className=\"chatMenu\">\n//           <div className=\"chatMenuWrapper\">\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n//             {conversations.map((c) => (\n//               <div onClick={() => setCurrentChat(c)}>\n//                {/* <Conversation conversation={c} currentUser={user} /> */}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"chatBox\">\n//           <div className=\"chatBoxWrapper\">\n//             {currentChat ? (\n//               <>\n//                 <div className=\"chatBoxTop\">\n//                   {messages.map((m) => (\n//                     <div ref={scrollRef}>\n//                       {/* <Message message={m} own={m.sender === user._id} /> */}\n//                     </div>\n//                   ))}\n//                 </div>\n//                 <div className=\"chatBoxBottom\">\n//                   <textarea\n//                     className=\"chatMessageInput\"\n//                     placeholder=\"write something...\"\n//                     onChange={(e) => setNewMessage(e.target.value)}\n//                     value={newMessage}\n//                   ></textarea>\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>\n//                     Send\n//                   </button>\n//                 </div>\n//               </>\n//             ) : (\n//               <span className=\"noConversationText\">\n//                 Open a conversation to start a chat.\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//         <div className=\"chatOnline\">\n//           <div className=\"chatOnlineWrapper\">\n//             <ChatOnline\n//               onlineUsers={onlineUsers}\n//               //currentId={user._id}\n//               setCurrentChat={setCurrentChat}\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/juanc/Desktop/Pomo 2.0_V2/Team5-55b01a0a991b27ce3a0be7ca18bfc9e31c8f4882/client/src/components/messenger/Messenger.jsx"],"names":[],"mappingssourcesContent":["// import React, { Component }  from 'react';\r\n// import \"./messenger.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n// import Conversation from \"../../components/conversations/Conversation\";\r\n// import Message from \"../../components/message/Message\";\r\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\r\n// import { useContext, useEffect, useRef, useState } from \"react\";\r\n// //import { AuthContext } from \"../../context/AuthContext\";\r\n// import axios from \"axios\";\r\n// //import { io } from \"socket.io-client\";\r\n\r\n// export default function Messenger() {\r\n//   const [conversations, setConversations] = useState([]);\r\n//   const [currentChat, setCurrentChat] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n//   const [arrivalMessage, setArrivalMessage] = useState(null);\r\n//   const [onlineUsers, setOnlineUsers] = useState([]);\r\n//   const socket = useRef();\r\n//   //const { user } = useContext(AuthContext);\r\n//   const scrollRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     socket.current = io(\"ws://localhost:8900\");\r\n//     socket.current.on(\"getMessage\", (data) => {\r\n//       setArrivalMessage({\r\n//         sender: data.senderId,\r\n//         text: data.text,\r\n//         createdAt: Date.now(),\r\n//       });\r\n//     });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     arrivalMessage &&\r\n//       currentChat?.members.includes(arrivalMessage.sender) &&\r\n//       setMessages((prev) => [...prev, arrivalMessage]);\r\n//   }, [arrivalMessage, currentChat]);\r\n\r\n//   // useEffect(() => {\r\n//   //   //socket.current.emit(\"addUser\", user._id);\r\n//   //   //socket.current.on(\"getUsers\", (users) => {\r\n//   //     setOnlineUsers(\r\n//   //       user.followings.filter((f) => users.some((u) => u.userId === f))\r\n//   //     );\r\n//   //   });\r\n//   // }, [user]);\r\n\r\n//   // useEffect(() => {\r\n//   //   const getConversations = async () => {\r\n//   //     try {\r\n//   //       const res = await axios.get(\"/conversations/\" + user._id);\r\n//   //       setConversations(res.data);\r\n//   //     } catch (err) {\r\n//   //       console.log(err);\r\n//   //     }\r\n//   //   };\r\n//     //getConversations();\r\n//   //}, [user._id]);\r\n\r\n//   useEffect(() => {\r\n//     const getMessages = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\r\n//         setMessages(res.data);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n//     getMessages();\r\n//   }, [currentChat]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const message = {\r\n//       //sender: user._id,\r\n//       text: newMessage,\r\n//       conversationId: currentChat._id,\r\n//     };\r\n\r\n//     const receiverId = currentChat.members.find(\r\n//      // (member) => member !== user._id\r\n//     );\r\n\r\n//     socket.current.emit(\"sendMessage\", {\r\n//       //senderId: user._id,\r\n//       receiverId,\r\n//       text: newMessage,\r\n//     });\r\n\r\n//     try {\r\n//       const res = await axios.post(\"/messages\", message);\r\n//       setMessages([...messages, res.data]);\r\n//       setNewMessage(\"\");\r\n//     } catch (err) {\r\n//       console.log(err);\r\n//     }\r\n//   };\r\n\r\n// //   useEffect(() => {scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n// //   }, [messages]);\r\n\r\n//   return (<>\r\n//       <Topbar />\r\n//       <div className=\"messenger\">\r\n//         <div className=\"chatMenu\">\r\n//           <div className=\"chatMenuWrapper\">\r\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\r\n//             {conversations.map((c) => (\r\n//               <div onClick={() => setCurrentChat(c)}>\r\n//                {/* <Conversation conversation={c} currentUser={user} /> */}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chatBox\">\r\n//           <div className=\"chatBoxWrapper\">\r\n//             {currentChat ? (\r\n//               <>\r\n//                 <div className=\"chatBoxTop\">\r\n//                   {messages.map((m) => (\r\n//                     <div ref={scrollRef}>\r\n//                       {/* <Message message={m} own={m.sender === user._id} /> */}\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//                 <div className=\"chatBoxBottom\">\r\n//                   <textarea\r\n//                     className=\"chatMessageInput\"\r\n//                     placeholder=\"write something...\"\r\n//                     onChange={(e) => setNewMessage(e.target.value)}\r\n//                     value={newMessage}\r\n//                   ></textarea>\r\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>\r\n//                     Send\r\n//                   </button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <span className=\"noConversationText\">\r\n//                 Open a conversation to start a chat.\r\n//               </span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chatOnline\">\r\n//           <div className=\"chatOnlineWrapper\">\r\n//             <ChatOnline\r\n//               onlineUsers={onlineUsers}\r\n//               //currentId={user._id}\r\n//               setCurrentChat={setCurrentChat}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}