{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nconst events_1 = require(\"events\");\n\nconst parser_v4 = require(\"engine.io-parser\");\n\nconst parser_v3 = require(\"./parser-v3/index\");\n\nconst debug_1 = require(\"debug\");\n\nconst debug = (0, debug_1.default)(\"engine:transport\");\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n\nclass Transport extends events_1.EventEmitter {\n  /**\n   * Transport constructor.\n   *\n   * @param {http.IncomingMessage} request\n   * @api public\n   */\n  constructor(req) {\n    super();\n    this.readyState = \"open\";\n    this.discarded = false;\n    this.protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n\n    this.parser = this.protocol === 4 ? parser_v4 : parser_v3;\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  set readyState(state) {\n    debug(\"readyState updated from %s to %s (%s)\", this._readyState, state, this.name);\n    this._readyState = state;\n  }\n  /**\n   * Flags the transport as discarded.\n   *\n   * @api private\n   */\n\n\n  discard() {\n    this.discarded = true;\n  }\n  /**\n   * Called with an incoming HTTP request.\n   *\n   * @param {http.IncomingMessage} request\n   * @api protected\n   */\n\n\n  onRequest(req) {\n    debug(\"setting request\");\n    this.req = req;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  close(fn) {\n    if (\"closed\" === this.readyState || \"closing\" === this.readyState) return;\n    this.readyState = \"closing\";\n    this.doClose(fn || noop);\n  }\n  /**\n   * Called with a transport error.\n   *\n   * @param {String} message error\n   * @param {Object} error description\n   * @api protected\n   */\n\n\n  onError(msg, desc) {\n    if (this.listeners(\"error\").length) {\n      const err = new Error(msg); // @ts-ignore\n\n      err.type = \"TransportError\"; // @ts-ignore\n\n      err.description = desc;\n      this.emit(\"error\", err);\n    } else {\n      debug(\"ignored transport error %s (%s)\", msg, desc);\n    }\n  }\n  /**\n   * Called with parsed out a packets from the data stream.\n   *\n   * @param {Object} packet\n   * @api protected\n   */\n\n\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n  /**\n   * Called with the encoded packet data.\n   *\n   * @param {String} data\n   * @api protected\n   */\n\n\n  onData(data) {\n    this.onPacket(this.parser.decodePacket(data));\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @api protected\n   */\n\n\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n\n}\n\nexports.Transport = Transport;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io/build/transport.js"],"names":["Object","defineProperty","exports","value","Transport","events_1","require","parser_v4","parser_v3","debug_1","debug","default","noop","EventEmitter","constructor","req","readyState","discarded","protocol","_query","EIO","parser","_readyState","state","name","discard","onRequest","close","fn","doClose","onError","msg","desc","listeners","length","err","Error","type","description","emit","onPacket","packet","onData","data","decodePacket","onClose"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst events_1 = require(\"events\");\nconst parser_v4 = require(\"engine.io-parser\");\nconst parser_v3 = require(\"./parser-v3/index\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:transport\");\n/**\n * Noop function.\n *\n * @api private\n */\nfunction noop() { }\nclass Transport extends events_1.EventEmitter {\n    /**\n     * Transport constructor.\n     *\n     * @param {http.IncomingMessage} request\n     * @api public\n     */\n    constructor(req) {\n        super();\n        this.readyState = \"open\";\n        this.discarded = false;\n        this.protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n        this.parser = this.protocol === 4 ? parser_v4 : parser_v3;\n    }\n    get readyState() {\n        return this._readyState;\n    }\n    set readyState(state) {\n        debug(\"readyState updated from %s to %s (%s)\", this._readyState, state, this.name);\n        this._readyState = state;\n    }\n    /**\n     * Flags the transport as discarded.\n     *\n     * @api private\n     */\n    discard() {\n        this.discarded = true;\n    }\n    /**\n     * Called with an incoming HTTP request.\n     *\n     * @param {http.IncomingMessage} request\n     * @api protected\n     */\n    onRequest(req) {\n        debug(\"setting request\");\n        this.req = req;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    close(fn) {\n        if (\"closed\" === this.readyState || \"closing\" === this.readyState)\n            return;\n        this.readyState = \"closing\";\n        this.doClose(fn || noop);\n    }\n    /**\n     * Called with a transport error.\n     *\n     * @param {String} message error\n     * @param {Object} error description\n     * @api protected\n     */\n    onError(msg, desc) {\n        if (this.listeners(\"error\").length) {\n            const err = new Error(msg);\n            // @ts-ignore\n            err.type = \"TransportError\";\n            // @ts-ignore\n            err.description = desc;\n            this.emit(\"error\", err);\n        }\n        else {\n            debug(\"ignored transport error %s (%s)\", msg, desc);\n        }\n    }\n    /**\n     * Called with parsed out a packets from the data stream.\n     *\n     * @param {Object} packet\n     * @api protected\n     */\n    onPacket(packet) {\n        this.emit(\"packet\", packet);\n    }\n    /**\n     * Called with the encoded packet data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        this.onPacket(this.parser.decodePacket(data));\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api protected\n     */\n    onClose() {\n        this.readyState = \"closed\";\n        this.emit(\"close\");\n    }\n}\nexports.Transport = Transport;\n"]},"metadata":{},"sourceType":"script"}