{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nconst events_1 = require(\"events\");\n\nconst debug_1 = require(\"debug\");\n\nconst timers_1 = require(\"timers\");\n\nconst debug = (0, debug_1.default)(\"engine:socket\");\n\nclass Socket extends events_1.EventEmitter {\n  /**\r\n   * Client class (abstract).\r\n   *\r\n   * @api private\r\n   */\n  constructor(id, server, transport, req, protocol) {\n    super();\n    this.id = id;\n    this.server = server;\n    this.upgrading = false;\n    this.upgraded = false;\n    this.readyState = \"opening\";\n    this.writeBuffer = [];\n    this.packetsFn = [];\n    this.sentCallbackFn = [];\n    this.cleanupFn = [];\n    this.request = req;\n    this.protocol = protocol; // Cache IP since it might not be in the req later\n\n    if (req.websocket && req.websocket._socket) {\n      this.remoteAddress = req.websocket._socket.remoteAddress;\n    } else {\n      this.remoteAddress = req.connection.remoteAddress;\n    }\n\n    this.checkIntervalTimer = null;\n    this.upgradeTimeoutTimer = null;\n    this.pingTimeoutTimer = null;\n    this.pingIntervalTimer = null;\n    this.setTransport(transport);\n    this.onOpen();\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  set readyState(state) {\n    debug(\"readyState updated from %s to %s\", this._readyState, state);\n    this._readyState = state;\n  }\n  /**\r\n   * Called upon transport considered open.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\"; // sends an `open` packet\n\n    this.transport.sid = this.id;\n    this.sendPacket(\"open\", JSON.stringify({\n      sid: this.id,\n      upgrades: this.getAvailableUpgrades(),\n      pingInterval: this.server.opts.pingInterval,\n      pingTimeout: this.server.opts.pingTimeout\n    }));\n\n    if (this.server.opts.initialPacket) {\n      this.sendPacket(\"message\", this.server.opts.initialPacket);\n    }\n\n    this.emit(\"open\");\n\n    if (this.protocol === 3) {\n      // in protocol v3, the client sends a ping, and the server answers with a pong\n      this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\n    } else {\n      // in protocol v4, the server sends a ping, and the client answers with a pong\n      this.schedulePing();\n    }\n  }\n  /**\r\n   * Called upon transport packet.\r\n   *\r\n   * @param {Object} packet\r\n   * @api private\r\n   */\n\n\n  onPacket(packet) {\n    if (\"open\" !== this.readyState) {\n      return debug(\"packet received with closed socket\");\n    } // export packet event\n\n\n    debug(`received packet ${packet.type}`);\n    this.emit(\"packet\", packet); // Reset ping timeout on any packet, incoming data is a good sign of\n    // other side's liveness\n\n    this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\n\n    switch (packet.type) {\n      case \"ping\":\n        if (this.transport.protocol !== 3) {\n          this.onError(\"invalid heartbeat direction\");\n          return;\n        }\n\n        debug(\"got ping\");\n        this.sendPacket(\"pong\");\n        this.emit(\"heartbeat\");\n        break;\n\n      case \"pong\":\n        if (this.transport.protocol === 3) {\n          this.onError(\"invalid heartbeat direction\");\n          return;\n        }\n\n        debug(\"got pong\");\n        this.pingIntervalTimer.refresh();\n        this.emit(\"heartbeat\");\n        break;\n\n      case \"error\":\n        this.onClose(\"parse error\");\n        break;\n\n      case \"message\":\n        this.emit(\"data\", packet.data);\n        this.emit(\"message\", packet.data);\n        break;\n    }\n  }\n  /**\r\n   * Called upon transport error.\r\n   *\r\n   * @param {Error} error object\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    debug(\"transport error\");\n    this.onClose(\"transport error\", err);\n  }\n  /**\r\n   * Pings client every `this.pingInterval` and expects response\r\n   * within `this.pingTimeout` or closes connection.\r\n   *\r\n   * @api private\r\n   */\n\n\n  schedulePing() {\n    this.pingIntervalTimer = (0, timers_1.setTimeout)(() => {\n      debug(\"writing ping packet - expecting pong within %sms\", this.server.opts.pingTimeout);\n      this.sendPacket(\"ping\");\n      this.resetPingTimeout(this.server.opts.pingTimeout);\n    }, this.server.opts.pingInterval);\n  }\n  /**\r\n   * Resets ping timeout.\r\n   *\r\n   * @api private\r\n   */\n\n\n  resetPingTimeout(timeout) {\n    (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = (0, timers_1.setTimeout)(() => {\n      if (this.readyState === \"closed\") return;\n      this.onClose(\"ping timeout\");\n    }, timeout);\n  }\n  /**\r\n   * Attaches handlers for the given transport.\r\n   *\r\n   * @param {Transport} transport\r\n   * @api private\r\n   */\n\n\n  setTransport(transport) {\n    const onError = this.onError.bind(this);\n    const onPacket = this.onPacket.bind(this);\n    const flush = this.flush.bind(this);\n    const onClose = this.onClose.bind(this, \"transport close\");\n    this.transport = transport;\n    this.transport.once(\"error\", onError);\n    this.transport.on(\"packet\", onPacket);\n    this.transport.on(\"drain\", flush);\n    this.transport.once(\"close\", onClose); // this function will manage packet events (also message callbacks)\n\n    this.setupSendCallback();\n    this.cleanupFn.push(function () {\n      transport.removeListener(\"error\", onError);\n      transport.removeListener(\"packet\", onPacket);\n      transport.removeListener(\"drain\", flush);\n      transport.removeListener(\"close\", onClose);\n    });\n  }\n  /**\r\n   * Upgrades socket to the given transport\r\n   *\r\n   * @param {Transport} transport\r\n   * @api private\r\n   */\n\n\n  maybeUpgrade(transport) {\n    debug('might upgrade socket transport from \"%s\" to \"%s\"', this.transport.name, transport.name);\n    this.upgrading = true; // set transport upgrade timer\n\n    this.upgradeTimeoutTimer = (0, timers_1.setTimeout)(() => {\n      debug(\"client did not complete upgrade - closing transport\");\n      cleanup();\n\n      if (\"open\" === transport.readyState) {\n        transport.close();\n      }\n    }, this.server.opts.upgradeTimeout);\n\n    const onPacket = packet => {\n      if (\"ping\" === packet.type && \"probe\" === packet.data) {\n        debug(\"got probe ping packet, sending pong\");\n        transport.send([{\n          type: \"pong\",\n          data: \"probe\"\n        }]);\n        this.emit(\"upgrading\", transport);\n        clearInterval(this.checkIntervalTimer);\n        this.checkIntervalTimer = setInterval(check, 100);\n      } else if (\"upgrade\" === packet.type && this.readyState !== \"closed\") {\n        debug(\"got upgrade packet - upgrading\");\n        cleanup();\n        this.transport.discard();\n        this.upgraded = true;\n        this.clearTransport();\n        this.setTransport(transport);\n        this.emit(\"upgrade\", transport);\n        this.flush();\n\n        if (this.readyState === \"closing\") {\n          transport.close(() => {\n            this.onClose(\"forced close\");\n          });\n        }\n      } else {\n        cleanup();\n        transport.close();\n      }\n    }; // we force a polling cycle to ensure a fast upgrade\n\n\n    const check = () => {\n      if (\"polling\" === this.transport.name && this.transport.writable) {\n        debug(\"writing a noop packet to polling for fast upgrade\");\n        this.transport.send([{\n          type: \"noop\"\n        }]);\n      }\n    };\n\n    const cleanup = () => {\n      this.upgrading = false;\n      clearInterval(this.checkIntervalTimer);\n      this.checkIntervalTimer = null;\n      (0, timers_1.clearTimeout)(this.upgradeTimeoutTimer);\n      this.upgradeTimeoutTimer = null;\n      transport.removeListener(\"packet\", onPacket);\n      transport.removeListener(\"close\", onTransportClose);\n      transport.removeListener(\"error\", onError);\n      this.removeListener(\"close\", onClose);\n    };\n\n    const onError = err => {\n      debug(\"client did not complete upgrade - %s\", err);\n      cleanup();\n      transport.close();\n      transport = null;\n    };\n\n    const onTransportClose = () => {\n      onError(\"transport closed\");\n    };\n\n    const onClose = () => {\n      onError(\"socket closed\");\n    };\n\n    transport.on(\"packet\", onPacket);\n    transport.once(\"close\", onTransportClose);\n    transport.once(\"error\", onError);\n    this.once(\"close\", onClose);\n  }\n  /**\r\n   * Clears listeners and timers associated with current transport.\r\n   *\r\n   * @api private\r\n   */\n\n\n  clearTransport() {\n    let cleanup;\n    const toCleanUp = this.cleanupFn.length;\n\n    for (let i = 0; i < toCleanUp; i++) {\n      cleanup = this.cleanupFn.shift();\n      cleanup();\n    } // silence further transport errors and prevent uncaught exceptions\n\n\n    this.transport.on(\"error\", function () {\n      debug(\"error triggered by discarded transport\");\n    }); // ensure transport won't stay open\n\n    this.transport.close();\n    (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n  }\n  /**\r\n   * Called upon transport considered closed.\r\n   * Possible reasons: `ping timeout`, `client error`, `parse error`,\r\n   * `transport error`, `server close`, `transport close`\r\n   */\n\n\n  onClose(reason, description) {\n    if (\"closed\" !== this.readyState) {\n      this.readyState = \"closed\"; // clear timers\n\n      (0, timers_1.clearTimeout)(this.pingIntervalTimer);\n      (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\n      clearInterval(this.checkIntervalTimer);\n      this.checkIntervalTimer = null;\n      (0, timers_1.clearTimeout)(this.upgradeTimeoutTimer); // clean writeBuffer in next tick, so developers can still\n      // grab the writeBuffer on 'close' event\n\n      process.nextTick(() => {\n        this.writeBuffer = [];\n      });\n      this.packetsFn = [];\n      this.sentCallbackFn = [];\n      this.clearTransport();\n      this.emit(\"close\", reason, description);\n    }\n  }\n  /**\r\n   * Setup and manage send callback\r\n   *\r\n   * @api private\r\n   */\n\n\n  setupSendCallback() {\n    // the message was sent successfully, execute the callback\n    const onDrain = () => {\n      if (this.sentCallbackFn.length > 0) {\n        const seqFn = this.sentCallbackFn.splice(0, 1)[0];\n\n        if (\"function\" === typeof seqFn) {\n          debug(\"executing send callback\");\n          seqFn(this.transport);\n        } else if (Array.isArray(seqFn)) {\n          debug(\"executing batch send callback\");\n          const l = seqFn.length;\n          let i = 0;\n\n          for (; i < l; i++) {\n            if (\"function\" === typeof seqFn[i]) {\n              seqFn[i](this.transport);\n            }\n          }\n        }\n      }\n    };\n\n    this.transport.on(\"drain\", onDrain);\n    this.cleanupFn.push(() => {\n      this.transport.removeListener(\"drain\", onDrain);\n    });\n  }\n  /**\r\n   * Sends a message packet.\r\n   *\r\n   * @param {Object} data\r\n   * @param {Object} options\r\n   * @param {Function} callback\r\n   * @return {Socket} for chaining\r\n   * @api public\r\n   */\n\n\n  send(data, options, callback) {\n    this.sendPacket(\"message\", data, options, callback);\n    return this;\n  }\n\n  write(data, options, callback) {\n    this.sendPacket(\"message\", data, options, callback);\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} type - packet type\r\n   * @param {String} data\r\n   * @param {Object} options\r\n   * @param {Function} callback\r\n   *\r\n   * @api private\r\n   */\n\n\n  sendPacket(type, data, options, callback) {\n    if (\"function\" === typeof options) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    if (\"closing\" !== this.readyState && \"closed\" !== this.readyState) {\n      debug('sending packet \"%s\" (%s)', type, data);\n      const packet = {\n        type,\n        options\n      };\n      if (data) packet.data = data; // exports packetCreate event\n\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet); // add send callback to object, if defined\n\n      if (callback) this.packetsFn.push(callback);\n      this.flush();\n    }\n  }\n  /**\r\n   * Attempts to flush the packets buffer.\r\n   *\r\n   * @api private\r\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && this.writeBuffer.length) {\n      debug(\"flushing buffer to transport\");\n      this.emit(\"flush\", this.writeBuffer);\n      this.server.emit(\"flush\", this, this.writeBuffer);\n      const wbuf = this.writeBuffer;\n      this.writeBuffer = [];\n\n      if (!this.transport.supportsFraming) {\n        this.sentCallbackFn.push(this.packetsFn);\n      } else {\n        this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);\n      }\n\n      this.packetsFn = [];\n      this.transport.send(wbuf);\n      this.emit(\"drain\");\n      this.server.emit(\"drain\", this);\n    }\n  }\n  /**\r\n   * Get available upgrades for this socket.\r\n   *\r\n   * @api private\r\n   */\n\n\n  getAvailableUpgrades() {\n    const availableUpgrades = [];\n    const allUpgrades = this.server.upgrades(this.transport.name);\n    let i = 0;\n    const l = allUpgrades.length;\n\n    for (; i < l; ++i) {\n      const upg = allUpgrades[i];\n\n      if (this.server.opts.transports.indexOf(upg) !== -1) {\n        availableUpgrades.push(upg);\n      }\n    }\n\n    return availableUpgrades;\n  }\n  /**\r\n   * Closes the socket and underlying transport.\r\n   *\r\n   * @param {Boolean} discard - optional, discard the transport\r\n   * @return {Socket} for chaining\r\n   * @api public\r\n   */\n\n\n  close(discard) {\n    if (\"open\" !== this.readyState) return;\n    this.readyState = \"closing\";\n\n    if (this.writeBuffer.length) {\n      this.once(\"drain\", this.closeTransport.bind(this, discard));\n      return;\n    }\n\n    this.closeTransport(discard);\n  }\n  /**\r\n   * Closes the underlying transport.\r\n   *\r\n   * @param {Boolean} discard\r\n   * @api private\r\n   */\n\n\n  closeTransport(discard) {\n    if (discard) this.transport.discard();\n    this.transport.close(this.onClose.bind(this, \"forced close\"));\n  }\n\n}\n\nexports.Socket = Socket;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io/build/socket.js"],"names":["Object","defineProperty","exports","value","Socket","events_1","require","debug_1","timers_1","debug","default","EventEmitter","constructor","id","server","transport","req","protocol","upgrading","upgraded","readyState","writeBuffer","packetsFn","sentCallbackFn","cleanupFn","request","websocket","_socket","remoteAddress","connection","checkIntervalTimer","upgradeTimeoutTimer","pingTimeoutTimer","pingIntervalTimer","setTransport","onOpen","_readyState","state","sid","sendPacket","JSON","stringify","upgrades","getAvailableUpgrades","pingInterval","opts","pingTimeout","initialPacket","emit","resetPingTimeout","schedulePing","onPacket","packet","type","onError","refresh","onClose","data","err","setTimeout","timeout","clearTimeout","bind","flush","once","on","setupSendCallback","push","removeListener","maybeUpgrade","name","cleanup","close","upgradeTimeout","send","clearInterval","setInterval","check","discard","clearTransport","writable","onTransportClose","toCleanUp","length","i","shift","reason","description","process","nextTick","onDrain","seqFn","splice","Array","isArray","l","options","callback","write","compress","wbuf","supportsFraming","apply","availableUpgrades","allUpgrades","upg","transports","indexOf","closeTransport"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst events_1 = require(\"events\");\r\nconst debug_1 = require(\"debug\");\r\nconst timers_1 = require(\"timers\");\r\nconst debug = (0, debug_1.default)(\"engine:socket\");\r\nclass Socket extends events_1.EventEmitter {\r\n    /**\r\n     * Client class (abstract).\r\n     *\r\n     * @api private\r\n     */\r\n    constructor(id, server, transport, req, protocol) {\r\n        super();\r\n        this.id = id;\r\n        this.server = server;\r\n        this.upgrading = false;\r\n        this.upgraded = false;\r\n        this.readyState = \"opening\";\r\n        this.writeBuffer = [];\r\n        this.packetsFn = [];\r\n        this.sentCallbackFn = [];\r\n        this.cleanupFn = [];\r\n        this.request = req;\r\n        this.protocol = protocol;\r\n        // Cache IP since it might not be in the req later\r\n        if (req.websocket && req.websocket._socket) {\r\n            this.remoteAddress = req.websocket._socket.remoteAddress;\r\n        }\r\n        else {\r\n            this.remoteAddress = req.connection.remoteAddress;\r\n        }\r\n        this.checkIntervalTimer = null;\r\n        this.upgradeTimeoutTimer = null;\r\n        this.pingTimeoutTimer = null;\r\n        this.pingIntervalTimer = null;\r\n        this.setTransport(transport);\r\n        this.onOpen();\r\n    }\r\n    get readyState() {\r\n        return this._readyState;\r\n    }\r\n    set readyState(state) {\r\n        debug(\"readyState updated from %s to %s\", this._readyState, state);\r\n        this._readyState = state;\r\n    }\r\n    /**\r\n     * Called upon transport considered open.\r\n     *\r\n     * @api private\r\n     */\r\n    onOpen() {\r\n        this.readyState = \"open\";\r\n        // sends an `open` packet\r\n        this.transport.sid = this.id;\r\n        this.sendPacket(\"open\", JSON.stringify({\r\n            sid: this.id,\r\n            upgrades: this.getAvailableUpgrades(),\r\n            pingInterval: this.server.opts.pingInterval,\r\n            pingTimeout: this.server.opts.pingTimeout\r\n        }));\r\n        if (this.server.opts.initialPacket) {\r\n            this.sendPacket(\"message\", this.server.opts.initialPacket);\r\n        }\r\n        this.emit(\"open\");\r\n        if (this.protocol === 3) {\r\n            // in protocol v3, the client sends a ping, and the server answers with a pong\r\n            this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\r\n        }\r\n        else {\r\n            // in protocol v4, the server sends a ping, and the client answers with a pong\r\n            this.schedulePing();\r\n        }\r\n    }\r\n    /**\r\n     * Called upon transport packet.\r\n     *\r\n     * @param {Object} packet\r\n     * @api private\r\n     */\r\n    onPacket(packet) {\r\n        if (\"open\" !== this.readyState) {\r\n            return debug(\"packet received with closed socket\");\r\n        }\r\n        // export packet event\r\n        debug(`received packet ${packet.type}`);\r\n        this.emit(\"packet\", packet);\r\n        // Reset ping timeout on any packet, incoming data is a good sign of\r\n        // other side's liveness\r\n        this.resetPingTimeout(this.server.opts.pingInterval + this.server.opts.pingTimeout);\r\n        switch (packet.type) {\r\n            case \"ping\":\r\n                if (this.transport.protocol !== 3) {\r\n                    this.onError(\"invalid heartbeat direction\");\r\n                    return;\r\n                }\r\n                debug(\"got ping\");\r\n                this.sendPacket(\"pong\");\r\n                this.emit(\"heartbeat\");\r\n                break;\r\n            case \"pong\":\r\n                if (this.transport.protocol === 3) {\r\n                    this.onError(\"invalid heartbeat direction\");\r\n                    return;\r\n                }\r\n                debug(\"got pong\");\r\n                this.pingIntervalTimer.refresh();\r\n                this.emit(\"heartbeat\");\r\n                break;\r\n            case \"error\":\r\n                this.onClose(\"parse error\");\r\n                break;\r\n            case \"message\":\r\n                this.emit(\"data\", packet.data);\r\n                this.emit(\"message\", packet.data);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon transport error.\r\n     *\r\n     * @param {Error} error object\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        debug(\"transport error\");\r\n        this.onClose(\"transport error\", err);\r\n    }\r\n    /**\r\n     * Pings client every `this.pingInterval` and expects response\r\n     * within `this.pingTimeout` or closes connection.\r\n     *\r\n     * @api private\r\n     */\r\n    schedulePing() {\r\n        this.pingIntervalTimer = (0, timers_1.setTimeout)(() => {\r\n            debug(\"writing ping packet - expecting pong within %sms\", this.server.opts.pingTimeout);\r\n            this.sendPacket(\"ping\");\r\n            this.resetPingTimeout(this.server.opts.pingTimeout);\r\n        }, this.server.opts.pingInterval);\r\n    }\r\n    /**\r\n     * Resets ping timeout.\r\n     *\r\n     * @api private\r\n     */\r\n    resetPingTimeout(timeout) {\r\n        (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\r\n        this.pingTimeoutTimer = (0, timers_1.setTimeout)(() => {\r\n            if (this.readyState === \"closed\")\r\n                return;\r\n            this.onClose(\"ping timeout\");\r\n        }, timeout);\r\n    }\r\n    /**\r\n     * Attaches handlers for the given transport.\r\n     *\r\n     * @param {Transport} transport\r\n     * @api private\r\n     */\r\n    setTransport(transport) {\r\n        const onError = this.onError.bind(this);\r\n        const onPacket = this.onPacket.bind(this);\r\n        const flush = this.flush.bind(this);\r\n        const onClose = this.onClose.bind(this, \"transport close\");\r\n        this.transport = transport;\r\n        this.transport.once(\"error\", onError);\r\n        this.transport.on(\"packet\", onPacket);\r\n        this.transport.on(\"drain\", flush);\r\n        this.transport.once(\"close\", onClose);\r\n        // this function will manage packet events (also message callbacks)\r\n        this.setupSendCallback();\r\n        this.cleanupFn.push(function () {\r\n            transport.removeListener(\"error\", onError);\r\n            transport.removeListener(\"packet\", onPacket);\r\n            transport.removeListener(\"drain\", flush);\r\n            transport.removeListener(\"close\", onClose);\r\n        });\r\n    }\r\n    /**\r\n     * Upgrades socket to the given transport\r\n     *\r\n     * @param {Transport} transport\r\n     * @api private\r\n     */\r\n    maybeUpgrade(transport) {\r\n        debug('might upgrade socket transport from \"%s\" to \"%s\"', this.transport.name, transport.name);\r\n        this.upgrading = true;\r\n        // set transport upgrade timer\r\n        this.upgradeTimeoutTimer = (0, timers_1.setTimeout)(() => {\r\n            debug(\"client did not complete upgrade - closing transport\");\r\n            cleanup();\r\n            if (\"open\" === transport.readyState) {\r\n                transport.close();\r\n            }\r\n        }, this.server.opts.upgradeTimeout);\r\n        const onPacket = packet => {\r\n            if (\"ping\" === packet.type && \"probe\" === packet.data) {\r\n                debug(\"got probe ping packet, sending pong\");\r\n                transport.send([{ type: \"pong\", data: \"probe\" }]);\r\n                this.emit(\"upgrading\", transport);\r\n                clearInterval(this.checkIntervalTimer);\r\n                this.checkIntervalTimer = setInterval(check, 100);\r\n            }\r\n            else if (\"upgrade\" === packet.type && this.readyState !== \"closed\") {\r\n                debug(\"got upgrade packet - upgrading\");\r\n                cleanup();\r\n                this.transport.discard();\r\n                this.upgraded = true;\r\n                this.clearTransport();\r\n                this.setTransport(transport);\r\n                this.emit(\"upgrade\", transport);\r\n                this.flush();\r\n                if (this.readyState === \"closing\") {\r\n                    transport.close(() => {\r\n                        this.onClose(\"forced close\");\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                cleanup();\r\n                transport.close();\r\n            }\r\n        };\r\n        // we force a polling cycle to ensure a fast upgrade\r\n        const check = () => {\r\n            if (\"polling\" === this.transport.name && this.transport.writable) {\r\n                debug(\"writing a noop packet to polling for fast upgrade\");\r\n                this.transport.send([{ type: \"noop\" }]);\r\n            }\r\n        };\r\n        const cleanup = () => {\r\n            this.upgrading = false;\r\n            clearInterval(this.checkIntervalTimer);\r\n            this.checkIntervalTimer = null;\r\n            (0, timers_1.clearTimeout)(this.upgradeTimeoutTimer);\r\n            this.upgradeTimeoutTimer = null;\r\n            transport.removeListener(\"packet\", onPacket);\r\n            transport.removeListener(\"close\", onTransportClose);\r\n            transport.removeListener(\"error\", onError);\r\n            this.removeListener(\"close\", onClose);\r\n        };\r\n        const onError = err => {\r\n            debug(\"client did not complete upgrade - %s\", err);\r\n            cleanup();\r\n            transport.close();\r\n            transport = null;\r\n        };\r\n        const onTransportClose = () => {\r\n            onError(\"transport closed\");\r\n        };\r\n        const onClose = () => {\r\n            onError(\"socket closed\");\r\n        };\r\n        transport.on(\"packet\", onPacket);\r\n        transport.once(\"close\", onTransportClose);\r\n        transport.once(\"error\", onError);\r\n        this.once(\"close\", onClose);\r\n    }\r\n    /**\r\n     * Clears listeners and timers associated with current transport.\r\n     *\r\n     * @api private\r\n     */\r\n    clearTransport() {\r\n        let cleanup;\r\n        const toCleanUp = this.cleanupFn.length;\r\n        for (let i = 0; i < toCleanUp; i++) {\r\n            cleanup = this.cleanupFn.shift();\r\n            cleanup();\r\n        }\r\n        // silence further transport errors and prevent uncaught exceptions\r\n        this.transport.on(\"error\", function () {\r\n            debug(\"error triggered by discarded transport\");\r\n        });\r\n        // ensure transport won't stay open\r\n        this.transport.close();\r\n        (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\r\n    }\r\n    /**\r\n     * Called upon transport considered closed.\r\n     * Possible reasons: `ping timeout`, `client error`, `parse error`,\r\n     * `transport error`, `server close`, `transport close`\r\n     */\r\n    onClose(reason, description) {\r\n        if (\"closed\" !== this.readyState) {\r\n            this.readyState = \"closed\";\r\n            // clear timers\r\n            (0, timers_1.clearTimeout)(this.pingIntervalTimer);\r\n            (0, timers_1.clearTimeout)(this.pingTimeoutTimer);\r\n            clearInterval(this.checkIntervalTimer);\r\n            this.checkIntervalTimer = null;\r\n            (0, timers_1.clearTimeout)(this.upgradeTimeoutTimer);\r\n            // clean writeBuffer in next tick, so developers can still\r\n            // grab the writeBuffer on 'close' event\r\n            process.nextTick(() => {\r\n                this.writeBuffer = [];\r\n            });\r\n            this.packetsFn = [];\r\n            this.sentCallbackFn = [];\r\n            this.clearTransport();\r\n            this.emit(\"close\", reason, description);\r\n        }\r\n    }\r\n    /**\r\n     * Setup and manage send callback\r\n     *\r\n     * @api private\r\n     */\r\n    setupSendCallback() {\r\n        // the message was sent successfully, execute the callback\r\n        const onDrain = () => {\r\n            if (this.sentCallbackFn.length > 0) {\r\n                const seqFn = this.sentCallbackFn.splice(0, 1)[0];\r\n                if (\"function\" === typeof seqFn) {\r\n                    debug(\"executing send callback\");\r\n                    seqFn(this.transport);\r\n                }\r\n                else if (Array.isArray(seqFn)) {\r\n                    debug(\"executing batch send callback\");\r\n                    const l = seqFn.length;\r\n                    let i = 0;\r\n                    for (; i < l; i++) {\r\n                        if (\"function\" === typeof seqFn[i]) {\r\n                            seqFn[i](this.transport);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.transport.on(\"drain\", onDrain);\r\n        this.cleanupFn.push(() => {\r\n            this.transport.removeListener(\"drain\", onDrain);\r\n        });\r\n    }\r\n    /**\r\n     * Sends a message packet.\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} options\r\n     * @param {Function} callback\r\n     * @return {Socket} for chaining\r\n     * @api public\r\n     */\r\n    send(data, options, callback) {\r\n        this.sendPacket(\"message\", data, options, callback);\r\n        return this;\r\n    }\r\n    write(data, options, callback) {\r\n        this.sendPacket(\"message\", data, options, callback);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} type - packet type\r\n     * @param {String} data\r\n     * @param {Object} options\r\n     * @param {Function} callback\r\n     *\r\n     * @api private\r\n     */\r\n    sendPacket(type, data, options, callback) {\r\n        if (\"function\" === typeof options) {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n        options.compress = false !== options.compress;\r\n        if (\"closing\" !== this.readyState && \"closed\" !== this.readyState) {\r\n            debug('sending packet \"%s\" (%s)', type, data);\r\n            const packet = {\r\n                type,\r\n                options\r\n            };\r\n            if (data)\r\n                packet.data = data;\r\n            // exports packetCreate event\r\n            this.emit(\"packetCreate\", packet);\r\n            this.writeBuffer.push(packet);\r\n            // add send callback to object, if defined\r\n            if (callback)\r\n                this.packetsFn.push(callback);\r\n            this.flush();\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to flush the packets buffer.\r\n     *\r\n     * @api private\r\n     */\r\n    flush() {\r\n        if (\"closed\" !== this.readyState &&\r\n            this.transport.writable &&\r\n            this.writeBuffer.length) {\r\n            debug(\"flushing buffer to transport\");\r\n            this.emit(\"flush\", this.writeBuffer);\r\n            this.server.emit(\"flush\", this, this.writeBuffer);\r\n            const wbuf = this.writeBuffer;\r\n            this.writeBuffer = [];\r\n            if (!this.transport.supportsFraming) {\r\n                this.sentCallbackFn.push(this.packetsFn);\r\n            }\r\n            else {\r\n                this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);\r\n            }\r\n            this.packetsFn = [];\r\n            this.transport.send(wbuf);\r\n            this.emit(\"drain\");\r\n            this.server.emit(\"drain\", this);\r\n        }\r\n    }\r\n    /**\r\n     * Get available upgrades for this socket.\r\n     *\r\n     * @api private\r\n     */\r\n    getAvailableUpgrades() {\r\n        const availableUpgrades = [];\r\n        const allUpgrades = this.server.upgrades(this.transport.name);\r\n        let i = 0;\r\n        const l = allUpgrades.length;\r\n        for (; i < l; ++i) {\r\n            const upg = allUpgrades[i];\r\n            if (this.server.opts.transports.indexOf(upg) !== -1) {\r\n                availableUpgrades.push(upg);\r\n            }\r\n        }\r\n        return availableUpgrades;\r\n    }\r\n    /**\r\n     * Closes the socket and underlying transport.\r\n     *\r\n     * @param {Boolean} discard - optional, discard the transport\r\n     * @return {Socket} for chaining\r\n     * @api public\r\n     */\r\n    close(discard) {\r\n        if (\"open\" !== this.readyState)\r\n            return;\r\n        this.readyState = \"closing\";\r\n        if (this.writeBuffer.length) {\r\n            this.once(\"drain\", this.closeTransport.bind(this, discard));\r\n            return;\r\n        }\r\n        this.closeTransport(discard);\r\n    }\r\n    /**\r\n     * Closes the underlying transport.\r\n     *\r\n     * @param {Boolean} discard\r\n     * @api private\r\n     */\r\n    closeTransport(discard) {\r\n        if (discard)\r\n            this.transport.discard();\r\n        this.transport.close(this.onClose.bind(this, \"forced close\"));\r\n    }\r\n}\r\nexports.Socket = Socket;\r\n"]},"metadata":{},"sourceType":"script"}