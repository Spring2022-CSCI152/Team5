{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nconst events_1 = require(\"events\");\n\nclass Adapter extends events_1.EventEmitter {\n  /**\r\n   * In-memory adapter constructor.\r\n   *\r\n   * @param {Namespace} nsp\r\n   */\n  constructor(nsp) {\n    super();\n    this.nsp = nsp;\n    this.rooms = new Map();\n    this.sids = new Map();\n    this.encoder = nsp.server.encoder;\n  }\n  /**\r\n   * To be overridden\r\n   */\n\n\n  init() {}\n  /**\r\n   * To be overridden\r\n   */\n\n\n  close() {}\n  /**\r\n   * Adds a socket to a list of room.\r\n   *\r\n   * @param {SocketId}  id      the socket id\r\n   * @param {Set<Room>} rooms   a set of rooms\r\n   * @public\r\n   */\n\n\n  addAll(id, rooms) {\n    if (!this.sids.has(id)) {\n      this.sids.set(id, new Set());\n    }\n\n    for (const room of rooms) {\n      this.sids.get(id).add(room);\n\n      if (!this.rooms.has(room)) {\n        this.rooms.set(room, new Set());\n        this.emit(\"create-room\", room);\n      }\n\n      if (!this.rooms.get(room).has(id)) {\n        this.rooms.get(room).add(id);\n        this.emit(\"join-room\", room, id);\n      }\n    }\n  }\n  /**\r\n   * Removes a socket from a room.\r\n   *\r\n   * @param {SocketId} id     the socket id\r\n   * @param {Room}     room   the room name\r\n   */\n\n\n  del(id, room) {\n    if (this.sids.has(id)) {\n      this.sids.get(id).delete(room);\n    }\n\n    this._del(room, id);\n  }\n\n  _del(room, id) {\n    const _room = this.rooms.get(room);\n\n    if (_room != null) {\n      const deleted = _room.delete(id);\n\n      if (deleted) {\n        this.emit(\"leave-room\", room, id);\n      }\n\n      if (_room.size === 0 && this.rooms.delete(room)) {\n        this.emit(\"delete-room\", room);\n      }\n    }\n  }\n  /**\r\n   * Removes a socket from all rooms it's joined.\r\n   *\r\n   * @param {SocketId} id   the socket id\r\n   */\n\n\n  delAll(id) {\n    if (!this.sids.has(id)) {\n      return;\n    }\n\n    for (const room of this.sids.get(id)) {\n      this._del(room, id);\n    }\n\n    this.sids.delete(id);\n  }\n  /**\r\n   * Broadcasts a packet.\r\n   *\r\n   * Options:\r\n   *  - `flags` {Object} flags for this packet\r\n   *  - `except` {Array} sids that should be excluded\r\n   *  - `rooms` {Array} list of rooms to broadcast to\r\n   *\r\n   * @param {Object} packet   the packet object\r\n   * @param {Object} opts     the options\r\n   * @public\r\n   */\n\n\n  broadcast(packet, opts) {\n    const flags = opts.flags || {};\n    const packetOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    packet.nsp = this.nsp.name;\n    const encodedPackets = this.encoder.encode(packet);\n    this.apply(opts, socket => {\n      socket.client.writeToEngine(encodedPackets, packetOpts);\n    });\n  }\n  /**\r\n   * Gets a list of sockets by sid.\r\n   *\r\n   * @param {Set<Room>} rooms   the explicit set of rooms to check.\r\n   */\n\n\n  sockets(rooms) {\n    const sids = new Set();\n    this.apply({\n      rooms\n    }, socket => {\n      sids.add(socket.id);\n    });\n    return Promise.resolve(sids);\n  }\n  /**\r\n   * Gets the list of rooms a given socket has joined.\r\n   *\r\n   * @param {SocketId} id   the socket id\r\n   */\n\n\n  socketRooms(id) {\n    return this.sids.get(id);\n  }\n  /**\r\n   * Returns the matching socket instances\r\n   *\r\n   * @param opts - the filters to apply\r\n   */\n\n\n  fetchSockets(opts) {\n    const sockets = [];\n    this.apply(opts, socket => {\n      sockets.push(socket);\n    });\n    return Promise.resolve(sockets);\n  }\n  /**\r\n   * Makes the matching socket instances join the specified rooms\r\n   *\r\n   * @param opts - the filters to apply\r\n   * @param rooms - the rooms to join\r\n   */\n\n\n  addSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      socket.join(rooms);\n    });\n  }\n  /**\r\n   * Makes the matching socket instances leave the specified rooms\r\n   *\r\n   * @param opts - the filters to apply\r\n   * @param rooms - the rooms to leave\r\n   */\n\n\n  delSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      rooms.forEach(room => socket.leave(room));\n    });\n  }\n  /**\r\n   * Makes the matching socket instances disconnect\r\n   *\r\n   * @param opts - the filters to apply\r\n   * @param close - whether to close the underlying connection\r\n   */\n\n\n  disconnectSockets(opts, close) {\n    this.apply(opts, socket => {\n      socket.disconnect(close);\n    });\n  }\n\n  apply(opts, callback) {\n    const rooms = opts.rooms;\n    const except = this.computeExceptSids(opts.except);\n\n    if (rooms.size) {\n      const ids = new Set();\n\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (ids.has(id) || except.has(id)) continue;\n          const socket = this.nsp.sockets.get(id);\n\n          if (socket) {\n            callback(socket);\n            ids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (except.has(id)) continue;\n        const socket = this.nsp.sockets.get(id);\n        if (socket) callback(socket);\n      }\n    }\n  }\n\n  computeExceptSids(exceptRooms) {\n    const exceptSids = new Set();\n\n    if (exceptRooms && exceptRooms.size > 0) {\n      for (const room of exceptRooms) {\n        if (this.rooms.has(room)) {\n          this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n        }\n      }\n    }\n\n    return exceptSids;\n  }\n  /**\r\n   * Send a packet to the other Socket.IO servers in the cluster\r\n   * @param packet - an array of arguments, which may include an acknowledgement callback at the end\r\n   */\n\n\n  serverSideEmit(packet) {\n    throw new Error(\"this adapter does not support the serverSideEmit() functionality\");\n  }\n\n}\n\nexports.Adapter = Adapter;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/socket.io-adapter/dist/index.js"],"names":["Object","defineProperty","exports","value","Adapter","events_1","require","EventEmitter","constructor","nsp","rooms","Map","sids","encoder","server","init","close","addAll","id","has","set","Set","room","get","add","emit","del","delete","_del","_room","deleted","size","delAll","broadcast","packet","opts","flags","packetOpts","preEncoded","volatile","compress","name","encodedPackets","encode","apply","socket","client","writeToEngine","sockets","Promise","resolve","socketRooms","fetchSockets","push","addSockets","join","delSockets","forEach","leave","disconnectSockets","disconnect","callback","except","computeExceptSids","ids","exceptRooms","exceptSids","sid","serverSideEmit","Error"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Adapter = void 0;\r\nconst events_1 = require(\"events\");\r\nclass Adapter extends events_1.EventEmitter {\r\n    /**\r\n     * In-memory adapter constructor.\r\n     *\r\n     * @param {Namespace} nsp\r\n     */\r\n    constructor(nsp) {\r\n        super();\r\n        this.nsp = nsp;\r\n        this.rooms = new Map();\r\n        this.sids = new Map();\r\n        this.encoder = nsp.server.encoder;\r\n    }\r\n    /**\r\n     * To be overridden\r\n     */\r\n    init() { }\r\n    /**\r\n     * To be overridden\r\n     */\r\n    close() { }\r\n    /**\r\n     * Adds a socket to a list of room.\r\n     *\r\n     * @param {SocketId}  id      the socket id\r\n     * @param {Set<Room>} rooms   a set of rooms\r\n     * @public\r\n     */\r\n    addAll(id, rooms) {\r\n        if (!this.sids.has(id)) {\r\n            this.sids.set(id, new Set());\r\n        }\r\n        for (const room of rooms) {\r\n            this.sids.get(id).add(room);\r\n            if (!this.rooms.has(room)) {\r\n                this.rooms.set(room, new Set());\r\n                this.emit(\"create-room\", room);\r\n            }\r\n            if (!this.rooms.get(room).has(id)) {\r\n                this.rooms.get(room).add(id);\r\n                this.emit(\"join-room\", room, id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Removes a socket from a room.\r\n     *\r\n     * @param {SocketId} id     the socket id\r\n     * @param {Room}     room   the room name\r\n     */\r\n    del(id, room) {\r\n        if (this.sids.has(id)) {\r\n            this.sids.get(id).delete(room);\r\n        }\r\n        this._del(room, id);\r\n    }\r\n    _del(room, id) {\r\n        const _room = this.rooms.get(room);\r\n        if (_room != null) {\r\n            const deleted = _room.delete(id);\r\n            if (deleted) {\r\n                this.emit(\"leave-room\", room, id);\r\n            }\r\n            if (_room.size === 0 && this.rooms.delete(room)) {\r\n                this.emit(\"delete-room\", room);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Removes a socket from all rooms it's joined.\r\n     *\r\n     * @param {SocketId} id   the socket id\r\n     */\r\n    delAll(id) {\r\n        if (!this.sids.has(id)) {\r\n            return;\r\n        }\r\n        for (const room of this.sids.get(id)) {\r\n            this._del(room, id);\r\n        }\r\n        this.sids.delete(id);\r\n    }\r\n    /**\r\n     * Broadcasts a packet.\r\n     *\r\n     * Options:\r\n     *  - `flags` {Object} flags for this packet\r\n     *  - `except` {Array} sids that should be excluded\r\n     *  - `rooms` {Array} list of rooms to broadcast to\r\n     *\r\n     * @param {Object} packet   the packet object\r\n     * @param {Object} opts     the options\r\n     * @public\r\n     */\r\n    broadcast(packet, opts) {\r\n        const flags = opts.flags || {};\r\n        const packetOpts = {\r\n            preEncoded: true,\r\n            volatile: flags.volatile,\r\n            compress: flags.compress\r\n        };\r\n        packet.nsp = this.nsp.name;\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        this.apply(opts, socket => {\r\n            socket.client.writeToEngine(encodedPackets, packetOpts);\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of sockets by sid.\r\n     *\r\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\r\n     */\r\n    sockets(rooms) {\r\n        const sids = new Set();\r\n        this.apply({ rooms }, socket => {\r\n            sids.add(socket.id);\r\n        });\r\n        return Promise.resolve(sids);\r\n    }\r\n    /**\r\n     * Gets the list of rooms a given socket has joined.\r\n     *\r\n     * @param {SocketId} id   the socket id\r\n     */\r\n    socketRooms(id) {\r\n        return this.sids.get(id);\r\n    }\r\n    /**\r\n     * Returns the matching socket instances\r\n     *\r\n     * @param opts - the filters to apply\r\n     */\r\n    fetchSockets(opts) {\r\n        const sockets = [];\r\n        this.apply(opts, socket => {\r\n            sockets.push(socket);\r\n        });\r\n        return Promise.resolve(sockets);\r\n    }\r\n    /**\r\n     * Makes the matching socket instances join the specified rooms\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param rooms - the rooms to join\r\n     */\r\n    addSockets(opts, rooms) {\r\n        this.apply(opts, socket => {\r\n            socket.join(rooms);\r\n        });\r\n    }\r\n    /**\r\n     * Makes the matching socket instances leave the specified rooms\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param rooms - the rooms to leave\r\n     */\r\n    delSockets(opts, rooms) {\r\n        this.apply(opts, socket => {\r\n            rooms.forEach(room => socket.leave(room));\r\n        });\r\n    }\r\n    /**\r\n     * Makes the matching socket instances disconnect\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param close - whether to close the underlying connection\r\n     */\r\n    disconnectSockets(opts, close) {\r\n        this.apply(opts, socket => {\r\n            socket.disconnect(close);\r\n        });\r\n    }\r\n    apply(opts, callback) {\r\n        const rooms = opts.rooms;\r\n        const except = this.computeExceptSids(opts.except);\r\n        if (rooms.size) {\r\n            const ids = new Set();\r\n            for (const room of rooms) {\r\n                if (!this.rooms.has(room))\r\n                    continue;\r\n                for (const id of this.rooms.get(room)) {\r\n                    if (ids.has(id) || except.has(id))\r\n                        continue;\r\n                    const socket = this.nsp.sockets.get(id);\r\n                    if (socket) {\r\n                        callback(socket);\r\n                        ids.add(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (const [id] of this.sids) {\r\n                if (except.has(id))\r\n                    continue;\r\n                const socket = this.nsp.sockets.get(id);\r\n                if (socket)\r\n                    callback(socket);\r\n            }\r\n        }\r\n    }\r\n    computeExceptSids(exceptRooms) {\r\n        const exceptSids = new Set();\r\n        if (exceptRooms && exceptRooms.size > 0) {\r\n            for (const room of exceptRooms) {\r\n                if (this.rooms.has(room)) {\r\n                    this.rooms.get(room).forEach(sid => exceptSids.add(sid));\r\n                }\r\n            }\r\n        }\r\n        return exceptSids;\r\n    }\r\n    /**\r\n     * Send a packet to the other Socket.IO servers in the cluster\r\n     * @param packet - an array of arguments, which may include an acknowledgement callback at the end\r\n     */\r\n    serverSideEmit(packet) {\r\n        throw new Error(\"this adapter does not support the serverSideEmit() functionality\");\r\n    }\r\n}\r\nexports.Adapter = Adapter;\r\n"]},"metadata":{},"sourceType":"script"}