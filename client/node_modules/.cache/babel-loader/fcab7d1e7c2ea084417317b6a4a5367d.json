{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = {},\n      prefix = designSystemPrefix,\n      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n      attribute = DEFAULT_ATTRIBUTE,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme\n    } = _ref;\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    let mergedTheme = deepmerge(restBaseTheme, restThemeProp);\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      colorSchemes,\n      vars: rootVars\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n\n    /**\r\n     * Your component tree.\r\n     */\n    children: PropTypes.node,\n\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\r\n     * css variable prefix\r\n     */\n    prefix: PropTypes.string,\n\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/Users/juanc/Desktop/KingdomDT/FS-CSCI150-F21-Team6/client/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","React","PropTypes","GlobalStyles","deepmerge","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","createCssVarsProvider","options","theme","baseTheme","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","basePrefix","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","body","setAttribute","Provider","styles","propTypes","string","node","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\"],\r\n      _excluded2 = [\"colorSchemes\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport { deepmerge } from '@mui/utils';\r\nimport cssVarsParser from './cssVarsParser';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    theme: baseTheme = {},\r\n    defaultMode: desisgnSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    prefix: designSystemPrefix = '',\r\n    shouldSkipGeneratingVar\r\n  } = options;\r\n\r\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = {},\r\n    prefix = designSystemPrefix,\r\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    attribute = DEFAULT_ATTRIBUTE,\r\n    defaultMode = desisgnSystemMode,\r\n    defaultColorScheme = designSystemColorScheme\r\n  }) {\r\n    const {\r\n      colorSchemes: baseColorSchemes = {}\r\n    } = baseTheme,\r\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\r\n\r\n    const {\r\n      colorSchemes: colorSchemesProp = {}\r\n    } = themeProp,\r\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\r\n\r\n    let mergedTheme = deepmerge(restBaseTheme, restThemeProp);\r\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n    const {\r\n      mode,\r\n      setMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      defaultMode\r\n    });\r\n\r\n    const resolvedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (defaultMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        } // use light color scheme, if default mode is 'light' | 'auto'\r\n\r\n\r\n        return defaultLightColorScheme;\r\n      }\r\n\r\n      return colorScheme;\r\n    })();\r\n\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars\r\n    } = cssVarsParser(mergedTheme, {\r\n      prefix,\r\n      basePrefix: designSystemPrefix,\r\n      shouldSkipGeneratingVar\r\n    });\r\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\r\n      colorSchemes,\r\n      vars: rootVars\r\n    });\r\n    const styleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars\r\n      } = cssVarsParser(scheme, {\r\n        prefix,\r\n        basePrefix: designSystemPrefix,\r\n        shouldSkipGeneratingVar\r\n      });\r\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\r\n\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n\r\n        return defaultColorScheme.light;\r\n      })();\r\n\r\n      if (key === resolvedDefaultColorScheme) {\r\n        styleSheet[':root'] = css;\r\n      } else {\r\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    });\r\n    React.useEffect(() => {\r\n      if (colorScheme) {\r\n        document.body.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute]);\r\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\r\n      value: {\r\n        mode,\r\n        setMode,\r\n        lightColorScheme,\r\n        darkColorScheme,\r\n        colorScheme,\r\n        setColorScheme,\r\n        allColorSchemes\r\n      },\r\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: {\r\n          ':root': rootCss\r\n        }\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: styleSheet\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        theme: mergedTheme,\r\n        children: children\r\n      })]\r\n    });\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n\r\n    /**\r\n     * Your component tree.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * css variable prefix\r\n     */\r\n    prefix: PropTypes.string,\r\n\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}