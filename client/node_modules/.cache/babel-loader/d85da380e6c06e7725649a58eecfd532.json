{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nfunction encryptByte(self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev);\n\n  var out = pad[0] ^ byteParam;\n  self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);\n  return out;\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length;\n  var out = Buffer.allocUnsafe(len);\n  var i = -1;\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt);\n  }\n\n  return out;\n};","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/browserify-aes/modes/cfb8.js"],"names":["Buffer","require","encryptByte","self","byteParam","decrypt","pad","_cipher","encryptBlock","_prev","out","concat","slice","from","exports","encrypt","chunk","len","length","allocUnsafe","i"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAApC;;AAEA,SAASE,WAAT,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAaC,YAAb,CAA0BL,IAAI,CAACM,KAA/B,CAAV;;AACA,MAAIC,GAAG,GAAGJ,GAAG,CAAC,CAAD,CAAH,GAASF,SAAnB;AAEAD,EAAAA,IAAI,CAACM,KAAL,GAAaT,MAAM,CAACW,MAAP,CAAc,CACzBR,IAAI,CAACM,KAAL,CAAWG,KAAX,CAAiB,CAAjB,CADyB,EAEzBZ,MAAM,CAACa,IAAP,CAAY,CAACR,OAAO,GAAGD,SAAH,GAAeM,GAAvB,CAAZ,CAFyB,CAAd,CAAb;AAKA,SAAOA,GAAP;AACD;;AAEDI,OAAO,CAACC,OAAR,GAAkB,UAAUZ,IAAV,EAAgBa,KAAhB,EAAuBX,OAAvB,EAAgC;AAChD,MAAIY,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIR,GAAG,GAAGV,MAAM,CAACmB,WAAP,CAAmBF,GAAnB,CAAV;AACA,MAAIG,CAAC,GAAG,CAAC,CAAT;;AAEA,SAAO,EAAEA,CAAF,GAAMH,GAAb,EAAkB;AAChBP,IAAAA,GAAG,CAACU,CAAD,CAAH,GAASlB,WAAW,CAACC,IAAD,EAAOa,KAAK,CAACI,CAAD,CAAZ,EAAiBf,OAAjB,CAApB;AACD;;AAED,SAAOK,GAAP;AACD,CAVD","sourcesContent":["var Buffer = require('safe-buffer').Buffer\r\n\r\nfunction encryptByte (self, byteParam, decrypt) {\r\n  var pad = self._cipher.encryptBlock(self._prev)\r\n  var out = pad[0] ^ byteParam\r\n\r\n  self._prev = Buffer.concat([\r\n    self._prev.slice(1),\r\n    Buffer.from([decrypt ? byteParam : out])\r\n  ])\r\n\r\n  return out\r\n}\r\n\r\nexports.encrypt = function (self, chunk, decrypt) {\r\n  var len = chunk.length\r\n  var out = Buffer.allocUnsafe(len)\r\n  var i = -1\r\n\r\n  while (++i < len) {\r\n    out[i] = encryptByte(self, chunk[i], decrypt)\r\n  }\r\n\r\n  return out\r\n}\r\n"]},"metadata":{},"sourceType":"script"}