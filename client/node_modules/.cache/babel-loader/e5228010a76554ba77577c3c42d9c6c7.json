{"ast":null,"code":"var ClientRequest = require('./lib/request');\n\nvar response = require('./lib/response');\n\nvar extend = require('xtend');\n\nvar statusCodes = require('builtin-status-codes');\n\nvar url = require('url');\n\nvar http = exports;\n\nhttp.request = function (opts, cb) {\n  if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts); // Normally, the page is loaded from http or https, so not specifying a protocol\n  // will result in a (valid) protocol-relative url. However, this won't work if\n  // the protocol is something else, like 'file:'\n\n  var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';\n  var protocol = opts.protocol || defaultProtocol;\n  var host = opts.hostname || opts.host;\n  var port = opts.port;\n  var path = opts.path || '/'; // Necessary for IPv6 addresses\n\n  if (host && host.indexOf(':') !== -1) host = '[' + host + ']'; // This may be a relative url. The browser should always be able to interpret it correctly.\n\n  opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;\n  opts.method = (opts.method || 'GET').toUpperCase();\n  opts.headers = opts.headers || {}; // Also valid opts.auth, opts.mode\n\n  var req = new ClientRequest(opts);\n  if (cb) req.on('response', cb);\n  return req;\n};\n\nhttp.get = function get(opts, cb) {\n  var req = http.request(opts, cb);\n  req.end();\n  return req;\n};\n\nhttp.ClientRequest = ClientRequest;\nhttp.IncomingMessage = response.IncomingMessage;\n\nhttp.Agent = function () {};\n\nhttp.Agent.defaultMaxSockets = 4;\nhttp.globalAgent = new http.Agent();\nhttp.STATUS_CODES = statusCodes;\nhttp.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/stream-http/index.js"],"names":["ClientRequest","require","response","extend","statusCodes","url","http","exports","request","opts","cb","parse","defaultProtocol","global","location","protocol","search","host","hostname","port","path","indexOf","method","toUpperCase","headers","req","on","get","end","IncomingMessage","Agent","defaultMaxSockets","globalAgent","STATUS_CODES","METHODS"],"mappings":"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","sourcesContent":["var ClientRequest = require('./lib/request')\r\nvar response = require('./lib/response')\r\nvar extend = require('xtend')\r\nvar statusCodes = require('builtin-status-codes')\r\nvar url = require('url')\r\n\r\nvar http = exports\r\n\r\nhttp.request = function (opts, cb) {\r\n\tif (typeof opts === 'string')\r\n\t\topts = url.parse(opts)\r\n\telse\r\n\t\topts = extend(opts)\r\n\r\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\r\n\t// will result in a (valid) protocol-relative url. However, this won't work if\r\n\t// the protocol is something else, like 'file:'\r\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\r\n\r\n\tvar protocol = opts.protocol || defaultProtocol\r\n\tvar host = opts.hostname || opts.host\r\n\tvar port = opts.port\r\n\tvar path = opts.path || '/'\r\n\r\n\t// Necessary for IPv6 addresses\r\n\tif (host && host.indexOf(':') !== -1)\r\n\t\thost = '[' + host + ']'\r\n\r\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\r\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\r\n\topts.method = (opts.method || 'GET').toUpperCase()\r\n\topts.headers = opts.headers || {}\r\n\r\n\t// Also valid opts.auth, opts.mode\r\n\r\n\tvar req = new ClientRequest(opts)\r\n\tif (cb)\r\n\t\treq.on('response', cb)\r\n\treturn req\r\n}\r\n\r\nhttp.get = function get (opts, cb) {\r\n\tvar req = http.request(opts, cb)\r\n\treq.end()\r\n\treturn req\r\n}\r\n\r\nhttp.ClientRequest = ClientRequest\r\nhttp.IncomingMessage = response.IncomingMessage\r\n\r\nhttp.Agent = function () {}\r\nhttp.Agent.defaultMaxSockets = 4\r\n\r\nhttp.globalAgent = new http.Agent()\r\n\r\nhttp.STATUS_CODES = statusCodes\r\n\r\nhttp.METHODS = [\r\n\t'CHECKOUT',\r\n\t'CONNECT',\r\n\t'COPY',\r\n\t'DELETE',\r\n\t'GET',\r\n\t'HEAD',\r\n\t'LOCK',\r\n\t'M-SEARCH',\r\n\t'MERGE',\r\n\t'MKACTIVITY',\r\n\t'MKCOL',\r\n\t'MOVE',\r\n\t'NOTIFY',\r\n\t'OPTIONS',\r\n\t'PATCH',\r\n\t'POST',\r\n\t'PROPFIND',\r\n\t'PROPPATCH',\r\n\t'PURGE',\r\n\t'PUT',\r\n\t'REPORT',\r\n\t'SEARCH',\r\n\t'SUBSCRIBE',\r\n\t'TRACE',\r\n\t'UNLOCK',\r\n\t'UNSUBSCRIBE'\r\n]"]},"metadata":{},"sourceType":"script"}