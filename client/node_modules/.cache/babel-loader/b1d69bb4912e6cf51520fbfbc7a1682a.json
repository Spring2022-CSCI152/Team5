{"ast":null,"code":"/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\n\nexport function toDate(input) {\n  if (input instanceof Date) return input; // @ts-ignore\n\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\n  input = (input || '' // @ts-ignore\n  ).trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n\n  return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\n\nexport function formatDiff(diff, localeFunc) {\n  /**\n   * if locale is not exist, use defaultLocale.\n   * if defaultLocale is not exist, use build-in `en`.\n   * be sure of no error when locale is not exist.\n   *\n   * If `time in`, then 1\n   * If `time ago`, then 0\n   */\n  var agoIn = diff < 0 ? 1 : 0;\n  /**\n   * Get absolute value of number (|diff| is non-negative) value of x\n   * |diff| = diff if diff is positive\n   * |diff| = -diff if diff is negative\n   * |0| = 0\n   */\n\n  diff = Math.abs(diff);\n  /**\n   * Time in seconds\n   */\n\n  var totalSec = diff;\n  /**\n   * Unit of time\n   */\n\n  var idx = 0;\n\n  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n    diff /= SEC_ARRAY[idx];\n  }\n  /**\n   * Math.floor() is alternative of ~~\n   *\n   * The differences and bugs:\n   * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n   * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n   *\n   * More information about the performance of algebraic:\n   * https://www.youtube.com/watch?v=65-RbBwZQdU\n   */\n\n\n  diff = Math.floor(diff);\n  idx *= 2;\n  if (diff > (idx === 0 ? 9 : 1)) idx += 1;\n  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\n\nexport function diffSec(date, relativeDate) {\n  var relDate = relativeDate ? toDate(relativeDate) : new Date();\n  return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\n\nexport function nextInterval(diff) {\n  var rst = 1,\n      i = 0,\n      d = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n}","map":{"version":3,"sources":["../../src/utils/date.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [\n    60,\n    60,\n    24,\n    7,\n    365 / 7 / 12,\n    12,\n];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n    if (input instanceof Date)\n        return input;\n    // @ts-ignore\n    if (!isNaN(input) || /^\\d+$/.test(input))\n        return new Date(parseInt(input));\n    input = (input || '')\n        // @ts-ignore\n        .trim()\n        .replace(/\\.\\d+/, '') // remove milliseconds\n        .replace(/-/, '/')\n        .replace(/-/, '/')\n        .replace(/(\\d)T(\\d)/, '$1 $2')\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n    return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n    /**\n     * if locale is not exist, use defaultLocale.\n     * if defaultLocale is not exist, use build-in `en`.\n     * be sure of no error when locale is not exist.\n     *\n     * If `time in`, then 1\n     * If `time ago`, then 0\n     */\n    var agoIn = diff < 0 ? 1 : 0;\n    /**\n     * Get absolute value of number (|diff| is non-negative) value of x\n     * |diff| = diff if diff is positive\n     * |diff| = -diff if diff is negative\n     * |0| = 0\n     */\n    diff = Math.abs(diff);\n    /**\n     * Time in seconds\n     */\n    var totalSec = diff;\n    /**\n     * Unit of time\n     */\n    var idx = 0;\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n        diff /= SEC_ARRAY[idx];\n    }\n    /**\n     * Math.floor() is alternative of ~~\n     *\n     * The differences and bugs:\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n     *\n     * More information about the performance of algebraic:\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\n     */\n    diff = Math.floor(diff);\n    idx *= 2;\n    if (diff > (idx === 0 ? 9 : 1))\n        idx += 1;\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n    var relDate = relativeDate ? toDate(relativeDate) : new Date();\n    return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n    var rst = 1, i = 0, d = Math.abs(diff);\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n        diff /= SEC_ARRAY[i];\n        rst *= SEC_ARRAY[i];\n    }\n    d = d % rst;\n    d = d ? rst - d : rst;\n    return Math.ceil(d);\n}\n//# sourceMappingURL=date.js.map"]},"metadata":{},"sourceType":"module"}