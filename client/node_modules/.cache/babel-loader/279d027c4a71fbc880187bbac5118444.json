{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nclass BroadcastOperator {\n  constructor(adapter) {\n    let rooms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    let exceptRooms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    let flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.adapter = adapter;\n    this.rooms = rooms;\n    this.exceptRooms = exceptRooms;\n    this.flags = flags;\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @param room\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  to(room) {\n    const rooms = new Set(this.rooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => rooms.add(r));\n    } else {\n      rooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @param room\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  in(room) {\n    return this.to(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @param room\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  except(room) {\n    const exceptRooms = new Set(this.exceptRooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => exceptRooms.add(r));\n    } else {\n      exceptRooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  compress(compress) {\n    const flags = Object.assign({}, this.flags, {\n      compress\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  get volatile() {\n    const flags = Object.assign({}, this.flags, {\n      volatile: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @return a new BroadcastOperator instance\n   * @public\n   */\n\n\n  get local() {\n    const flags = Object.assign({}, this.flags, {\n      local: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation\n   *\n   * <pre><code>\n   *\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   // ...\n   * });\n   *\n   * </pre></code>\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    const flags = Object.assign({}, this.flags, {\n      timeout\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Emits to all clients.\n   *\n   * @return Always true\n   * @public\n   */\n\n\n  emit(ev) {\n    if (socket_1.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${ev}\" is a reserved event name`);\n    } // set up packet object\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    const data = [ev, ...args];\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: data\n    };\n    const withAck = typeof data[data.length - 1] === \"function\";\n\n    if (!withAck) {\n      this.adapter.broadcast(packet, {\n        rooms: this.rooms,\n        except: this.exceptRooms,\n        flags: this.flags\n      });\n      return true;\n    }\n\n    const ack = data.pop();\n    let timedOut = false;\n    let responses = [];\n    const timer = setTimeout(() => {\n      timedOut = true;\n      ack.apply(this, [new Error(\"operation has timed out\"), responses]);\n    }, this.flags.timeout);\n    let expectedServerCount = -1;\n    let actualServerCount = 0;\n    let expectedClientCount = 0;\n\n    const checkCompleteness = () => {\n      if (!timedOut && expectedServerCount === actualServerCount && responses.length === expectedClientCount) {\n        clearTimeout(timer);\n        ack.apply(this, [null, responses]);\n      }\n    };\n\n    this.adapter.broadcastWithAck(packet, {\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, clientCount => {\n      // each Socket.IO server in the cluster sends the number of clients that were notified\n      expectedClientCount += clientCount;\n      actualServerCount++;\n      checkCompleteness();\n    }, clientResponse => {\n      // each client sends an acknowledgement\n      responses.push(clientResponse);\n      checkCompleteness();\n    });\n    this.adapter.serverCount().then(serverCount => {\n      expectedServerCount = serverCount;\n      checkCompleteness();\n    });\n    return true;\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @public\n   */\n\n\n  allSockets() {\n    if (!this.adapter) {\n      throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n    }\n\n    return this.adapter.sockets(this.rooms);\n  }\n  /**\n   * Returns the matching socket instances\n   *\n   * @public\n   */\n\n\n  fetchSockets() {\n    return this.adapter.fetchSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms\n    }).then(sockets => {\n      return sockets.map(socket => {\n        if (socket instanceof socket_1.Socket) {\n          // FIXME the TypeScript compiler complains about missing private properties\n          return socket;\n        } else {\n          return new RemoteSocket(this.adapter, socket);\n        }\n      });\n    });\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms\n   *\n   * @param room\n   * @public\n   */\n\n\n  socketsJoin(room) {\n    this.adapter.addSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms\n   *\n   * @param room\n   * @public\n   */\n\n\n  socketsLeave(room) {\n    this.adapter.delSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances disconnect\n   *\n   * @param close - whether to close the underlying connection\n   * @public\n   */\n\n\n  disconnectSockets() {\n    let close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.adapter.disconnectSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms\n    }, close);\n  }\n\n}\n\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\n\nclass RemoteSocket {\n  constructor(adapter, details) {\n    this.id = details.id;\n    this.handshake = details.handshake;\n    this.rooms = new Set(details.rooms);\n    this.data = details.data;\n    this.operator = new BroadcastOperator(adapter, new Set([this.id]));\n  }\n\n  emit(ev) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return this.operator.emit(ev, ...args);\n  }\n  /**\n   * Joins a room.\n   *\n   * @param {String|Array} room - room or array of rooms\n   * @public\n   */\n\n\n  join(room) {\n    return this.operator.socketsJoin(room);\n  }\n  /**\n   * Leaves a room.\n   *\n   * @param {String} room\n   * @public\n   */\n\n\n  leave(room) {\n    return this.operator.socketsLeave(room);\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return {Socket} self\n   *\n   * @public\n   */\n\n\n  disconnect() {\n    let close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.operator.disconnectSockets(close);\n    return this;\n  }\n\n}\n\nexports.RemoteSocket = RemoteSocket;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/socket.io/dist/broadcast-operator.js"],"names":["Object","defineProperty","exports","value","RemoteSocket","BroadcastOperator","socket_1","require","socket_io_parser_1","constructor","adapter","rooms","Set","exceptRooms","flags","to","room","Array","isArray","forEach","r","add","in","except","compress","assign","volatile","local","timeout","emit","ev","RESERVED_EVENTS","has","Error","args","data","packet","type","PacketType","EVENT","withAck","length","broadcast","ack","pop","timedOut","responses","timer","setTimeout","apply","expectedServerCount","actualServerCount","expectedClientCount","checkCompleteness","clearTimeout","broadcastWithAck","clientCount","clientResponse","push","serverCount","then","allSockets","sockets","fetchSockets","map","socket","Socket","socketsJoin","addSockets","socketsLeave","delSockets","disconnectSockets","close","details","id","handshake","operator","join","leave","disconnect"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\nconst socket_1 = require(\"./socket\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nclass BroadcastOperator {\n    constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n        this.adapter = adapter;\n        this.rooms = rooms;\n        this.exceptRooms = exceptRooms;\n        this.flags = flags;\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    to(room) {\n        const rooms = new Set(this.rooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => rooms.add(r));\n        }\n        else {\n            rooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    in(room) {\n        return this.to(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @param room\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    except(room) {\n        const exceptRooms = new Set(this.exceptRooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => exceptRooms.add(r));\n        }\n        else {\n            exceptRooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    compress(compress) {\n        const flags = Object.assign({}, this.flags, { compress });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    get volatile() {\n        const flags = Object.assign({}, this.flags, { volatile: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return a new BroadcastOperator instance\n     * @public\n     */\n    get local() {\n        const flags = Object.assign({}, this.flags, { local: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * <pre><code>\n     *\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   // ...\n     * });\n     *\n     * </pre></code>\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        const flags = Object.assign({}, this.flags, { timeout });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @return Always true\n     * @public\n     */\n    emit(ev, ...args) {\n        if (socket_1.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${ev}\" is a reserved event name`);\n        }\n        // set up packet object\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        const withAck = typeof data[data.length - 1] === \"function\";\n        if (!withAck) {\n            this.adapter.broadcast(packet, {\n                rooms: this.rooms,\n                except: this.exceptRooms,\n                flags: this.flags,\n            });\n            return true;\n        }\n        const ack = data.pop();\n        let timedOut = false;\n        let responses = [];\n        const timer = setTimeout(() => {\n            timedOut = true;\n            ack.apply(this, [new Error(\"operation has timed out\"), responses]);\n        }, this.flags.timeout);\n        let expectedServerCount = -1;\n        let actualServerCount = 0;\n        let expectedClientCount = 0;\n        const checkCompleteness = () => {\n            if (!timedOut &&\n                expectedServerCount === actualServerCount &&\n                responses.length === expectedClientCount) {\n                clearTimeout(timer);\n                ack.apply(this, [null, responses]);\n            }\n        };\n        this.adapter.broadcastWithAck(packet, {\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, (clientCount) => {\n            // each Socket.IO server in the cluster sends the number of clients that were notified\n            expectedClientCount += clientCount;\n            actualServerCount++;\n            checkCompleteness();\n        }, (clientResponse) => {\n            // each client sends an acknowledgement\n            responses.push(clientResponse);\n            checkCompleteness();\n        });\n        this.adapter.serverCount().then((serverCount) => {\n            expectedServerCount = serverCount;\n            checkCompleteness();\n        });\n        return true;\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @public\n     */\n    allSockets() {\n        if (!this.adapter) {\n            throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n        }\n        return this.adapter.sockets(this.rooms);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @public\n     */\n    fetchSockets() {\n        return this.adapter\n            .fetchSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n        })\n            .then((sockets) => {\n            return sockets.map((socket) => {\n                if (socket instanceof socket_1.Socket) {\n                    // FIXME the TypeScript compiler complains about missing private properties\n                    return socket;\n                }\n                else {\n                    return new RemoteSocket(this.adapter, socket);\n                }\n            });\n        });\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsJoin(room) {\n        this.adapter.addSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsLeave(room) {\n        this.adapter.delSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param close - whether to close the underlying connection\n     * @public\n     */\n    disconnectSockets(close = false) {\n        this.adapter.disconnectSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n        }, close);\n    }\n}\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\nclass RemoteSocket {\n    constructor(adapter, details) {\n        this.id = details.id;\n        this.handshake = details.handshake;\n        this.rooms = new Set(details.rooms);\n        this.data = details.data;\n        this.operator = new BroadcastOperator(adapter, new Set([this.id]));\n    }\n    emit(ev, ...args) {\n        return this.operator.emit(ev, ...args);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} room - room or array of rooms\n     * @public\n     */\n    join(room) {\n        return this.operator.socketsJoin(room);\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     * @public\n     */\n    leave(room) {\n        return this.operator.socketsLeave(room);\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     *\n     * @public\n     */\n    disconnect(close = false) {\n        this.operator.disconnectSockets(close);\n        return this;\n    }\n}\nexports.RemoteSocket = RemoteSocket;\n"]},"metadata":{},"sourceType":"script"}