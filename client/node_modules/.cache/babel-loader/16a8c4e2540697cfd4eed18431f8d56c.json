{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JSONP = void 0;\n\nconst polling_1 = require(\"./polling\");\n\nconst qs = require(\"querystring\");\n\nconst rDoubleSlashes = /\\\\\\\\n/g;\nconst rSlashes = /(\\\\)?\\\\n/g;\n\nclass JSONP extends polling_1.Polling {\n  /**\r\n   * JSON-P polling transport.\r\n   *\r\n   * @api public\r\n   */\n  constructor(req) {\n    super(req);\n    this.head = \"___eio[\" + (req._query.j || \"\").replace(/[^0-9]/g, \"\") + \"](\";\n    this.foot = \");\";\n  }\n  /**\r\n   * Handles incoming data.\r\n   * Due to a bug in \\n handling by browsers, we expect a escaped string.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    // we leverage the qs module so that we get built-in DoS protection\n    // and the fast alternative to decodeURIComponent\n    data = qs.parse(data).d;\n\n    if (\"string\" === typeof data) {\n      // client will send already escaped newlines as \\\\\\\\n and newlines as \\\\n\n      // \\\\n must be replaced with \\n and \\\\\\\\n with \\\\n\n      data = data.replace(rSlashes, function (match, slashes) {\n        return slashes ? match : \"\\n\";\n      });\n      super.onData(data.replace(rDoubleSlashes, \"\\\\n\"));\n    }\n  }\n  /**\r\n   * Performs the write.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doWrite(data, options, callback) {\n    // we must output valid javascript, not valid json\n    // see: http://timelessrepo.com/json-isnt-a-javascript-subset\n    const js = JSON.stringify(data).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\"); // prepare response\n\n    data = this.head + js + this.foot;\n    super.doWrite(data, options, callback);\n  }\n\n}\n\nexports.JSONP = JSONP;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io/build/transports/polling-jsonp.js"],"names":["Object","defineProperty","exports","value","JSONP","polling_1","require","qs","rDoubleSlashes","rSlashes","Polling","constructor","req","head","_query","j","replace","foot","onData","data","parse","d","match","slashes","doWrite","options","callback","js","JSON","stringify"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAME,cAAc,GAAG,QAAvB;AACA,MAAMC,QAAQ,GAAG,WAAjB;;AACA,MAAML,KAAN,SAAoBC,SAAS,CAACK,OAA9B,CAAsC;AAClC;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,UAAMA,GAAN;AACA,SAAKC,IAAL,GAAY,YAAY,CAACD,GAAG,CAACE,MAAJ,CAAWC,CAAX,IAAgB,EAAjB,EAAqBC,OAArB,CAA6B,SAA7B,EAAwC,EAAxC,CAAZ,GAA0D,IAAtE;AACA,SAAKC,IAAL,GAAY,IAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT;AACA;AACAA,IAAAA,IAAI,GAAGZ,EAAE,CAACa,KAAH,CAASD,IAAT,EAAeE,CAAtB;;AACA,QAAI,aAAa,OAAOF,IAAxB,EAA8B;AAC1B;AACA;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAaP,QAAb,EAAuB,UAAUa,KAAV,EAAiBC,OAAjB,EAA0B;AACpD,eAAOA,OAAO,GAAGD,KAAH,GAAW,IAAzB;AACH,OAFM,CAAP;AAGA,YAAMJ,MAAN,CAAaC,IAAI,CAACH,OAAL,CAAaR,cAAb,EAA6B,KAA7B,CAAb;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIgB,EAAAA,OAAO,CAACL,IAAD,EAAOM,OAAP,EAAgBC,QAAhB,EAA0B;AAC7B;AACA;AACA,UAAMC,EAAE,GAAGC,IAAI,CAACC,SAAL,CAAeV,IAAf,EACNH,OADM,CACE,SADF,EACa,SADb,EAENA,OAFM,CAEE,SAFF,EAEa,SAFb,CAAX,CAH6B,CAM7B;;AACAG,IAAAA,IAAI,GAAG,KAAKN,IAAL,GAAYc,EAAZ,GAAiB,KAAKV,IAA7B;AACA,UAAMO,OAAN,CAAcL,IAAd,EAAoBM,OAApB,EAA6BC,QAA7B;AACH;;AA5CiC;;AA8CtCxB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JSONP = void 0;\r\nconst polling_1 = require(\"./polling\");\r\nconst qs = require(\"querystring\");\r\nconst rDoubleSlashes = /\\\\\\\\n/g;\r\nconst rSlashes = /(\\\\)?\\\\n/g;\r\nclass JSONP extends polling_1.Polling {\r\n    /**\r\n     * JSON-P polling transport.\r\n     *\r\n     * @api public\r\n     */\r\n    constructor(req) {\r\n        super(req);\r\n        this.head = \"___eio[\" + (req._query.j || \"\").replace(/[^0-9]/g, \"\") + \"](\";\r\n        this.foot = \");\";\r\n    }\r\n    /**\r\n     * Handles incoming data.\r\n     * Due to a bug in \\n handling by browsers, we expect a escaped string.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        // we leverage the qs module so that we get built-in DoS protection\r\n        // and the fast alternative to decodeURIComponent\r\n        data = qs.parse(data).d;\r\n        if (\"string\" === typeof data) {\r\n            // client will send already escaped newlines as \\\\\\\\n and newlines as \\\\n\r\n            // \\\\n must be replaced with \\n and \\\\\\\\n with \\\\n\r\n            data = data.replace(rSlashes, function (match, slashes) {\r\n                return slashes ? match : \"\\n\";\r\n            });\r\n            super.onData(data.replace(rDoubleSlashes, \"\\\\n\"));\r\n        }\r\n    }\r\n    /**\r\n     * Performs the write.\r\n     *\r\n     * @api private\r\n     */\r\n    doWrite(data, options, callback) {\r\n        // we must output valid javascript, not valid json\r\n        // see: http://timelessrepo.com/json-isnt-a-javascript-subset\r\n        const js = JSON.stringify(data)\r\n            .replace(/\\u2028/g, \"\\\\u2028\")\r\n            .replace(/\\u2029/g, \"\\\\u2029\");\r\n        // prepare response\r\n        data = this.head + js + this.foot;\r\n        super.doWrite(data, options, callback);\r\n    }\r\n}\r\nexports.JSONP = JSONP;\r\n"]},"metadata":{},"sourceType":"script"}