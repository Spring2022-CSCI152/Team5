{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst typed_events_1 = require(\"./typed-events\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\n\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n\nclass Namespace extends typed_events_1.StrictEventEmitter {\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  constructor(server, name) {\n    super();\n    this.sockets = new Map();\n    /** @private */\n\n    this._fns = [];\n    /** @private */\n\n    this._ids = 0;\n    this.server = server;\n    this.name = name;\n\n    this._initAdapter();\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n\n\n  _initAdapter() {\n    // @ts-ignore\n    this.adapter = new (this.server.adapter())(this);\n  }\n  /**\n   * Sets up namespace middleware.\n   *\n   * @return self\n   * @public\n   */\n\n\n  use(fn) {\n    this._fns.push(fn);\n\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming client.\n   *\n   * @param socket - the socket that will get added\n   * @param fn - last fn call in the middleware\n   * @private\n   */\n\n\n  run(socket, fn) {\n    const fns = this._fns.slice(0);\n\n    if (!fns.length) return fn(null);\n\n    function run(i) {\n      fns[i](socket, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err); // if no middleware left, summon callback\n\n        if (!fns[i + 1]) return fn(null); // go on to next\n\n        run(i + 1);\n      });\n    }\n\n    run(0);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @param room\n   * @return self\n   * @public\n   */\n\n\n  to(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @param room\n   * @return self\n   * @public\n   */\n\n\n  in(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @param room\n   * @return self\n   * @public\n   */\n\n\n  except(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n  }\n  /**\n   * Adds a new client.\n   *\n   * @return {Socket}\n   * @private\n   */\n\n\n  _add(client, query, fn) {\n    debug(\"adding socket to nsp %s\", this.name);\n    const socket = new socket_1.Socket(this, client, query);\n    this.run(socket, err => {\n      process.nextTick(() => {\n        if (\"open\" == client.conn.readyState) {\n          if (err) {\n            if (client.conn.protocol === 3) {\n              return socket._error(err.data || err.message);\n            } else {\n              return socket._error({\n                message: err.message,\n                data: err.data\n              });\n            }\n          } // track socket\n\n\n          this.sockets.set(socket.id, socket); // it's paramount that the internal `onconnect` logic\n          // fires before user-set events to prevent state order\n          // violations (such as a disconnection before the connection\n          // logic is complete)\n\n          socket._onconnect();\n\n          if (fn) fn(); // fire user-set events\n\n          this.emitReserved(\"connect\", socket);\n          this.emitReserved(\"connection\", socket);\n        } else {\n          debug(\"next called after client was closed - ignoring socket\");\n        }\n      });\n    });\n    return socket;\n  }\n  /**\n   * Removes a client. Called by each `Socket`.\n   *\n   * @private\n   */\n\n\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      this.sockets.delete(socket.id);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Emits to all clients.\n   *\n   * @return Always true\n   * @public\n   */\n\n\n  emit(ev) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n  }\n  /**\n   * Sends a `message` event to all clients.\n   *\n   * @return self\n   * @public\n   */\n\n\n  send() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event to all clients.\n   *\n   * @return self\n   * @public\n   */\n\n\n  write() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Emit a packet to other Socket.IO servers\n   *\n   * @param ev - the event name\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   * @public\n   */\n\n\n  serverSideEmit(ev) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${ev}\" is a reserved event name`);\n    }\n\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    args.unshift(ev);\n    this.adapter.serverSideEmit(args);\n    return true;\n  }\n  /**\n   * Called when a packet is received from another Socket.IO server\n   *\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   *\n   * @private\n   */\n\n\n  _onServerSideEmit(args) {\n    super.emitUntyped.apply(this, args);\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @return self\n   * @public\n   */\n\n\n  allSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   * @public\n   */\n\n\n  compress(compress) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @return self\n   * @public\n   */\n\n\n  get volatile() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @return self\n   * @public\n   */\n\n\n  get local() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation\n   *\n   * <pre><code>\n   *\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   // ...\n   * });\n   *\n   * </pre></code>\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n  }\n  /**\n   * Returns the matching socket instances\n   *\n   * @public\n   */\n\n\n  fetchSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms\n   *\n   * @param room\n   * @public\n   */\n\n\n  socketsJoin(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms\n   *\n   * @param room\n   * @public\n   */\n\n\n  socketsLeave(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n  }\n  /**\n   * Makes the matching socket instances disconnect\n   *\n   * @param close - whether to close the underlying connection\n   * @public\n   */\n\n\n  disconnectSockets() {\n    let close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n  }\n\n}\n\nexports.Namespace = Namespace;","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/socket.io/dist/namespace.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Namespace","RESERVED_EVENTS","socket_1","require","typed_events_1","debug_1","broadcast_operator_1","debug","default","Set","StrictEventEmitter","constructor","server","name","sockets","Map","_fns","_ids","_initAdapter","adapter","use","fn","push","run","socket","fns","slice","length","i","err","to","room","BroadcastOperator","in","except","_add","client","query","Socket","process","nextTick","conn","readyState","protocol","_error","data","message","set","id","_onconnect","emitReserved","_remove","has","delete","emit","ev","args","send","write","serverSideEmit","Error","unshift","_onServerSideEmit","emitUntyped","apply","allSockets","compress","volatile","local","timeout","fetchSockets","socketsJoin","socketsLeave","disconnectSockets","close"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAAnD;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAME,OAAO,GAAGZ,eAAe,CAACU,OAAO,CAAC,OAAD,CAAR,CAA/B;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,sBAAD,CAApC;;AACA,MAAMI,KAAK,GAAG,CAAC,GAAGF,OAAO,CAACG,OAAZ,EAAqB,qBAArB,CAAd;AACAV,OAAO,CAACG,eAAR,GAA0B,IAAIQ,GAAJ,CAAQ,CAAC,SAAD,EAAY,YAAZ,EAA0B,eAA1B,CAAR,CAA1B;;AACA,MAAMT,SAAN,SAAwBI,cAAc,CAACM,kBAAvC,CAA0D;AACtD;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB;AACA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA;;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA;;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;;AACA,SAAKK,YAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,YAAY,GAAG;AACX;AACA,SAAKC,OAAL,GAAe,KAAK,KAAKP,MAAL,CAAYO,OAAZ,EAAL,EAA4B,IAA5B,CAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,GAAG,CAACC,EAAD,EAAK;AACJ,SAAKL,IAAL,CAAUM,IAAV,CAAeD,EAAf;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,GAAG,CAACC,MAAD,EAASH,EAAT,EAAa;AACZ,UAAMI,GAAG,GAAG,KAAKT,IAAL,CAAUU,KAAV,CAAgB,CAAhB,CAAZ;;AACA,QAAI,CAACD,GAAG,CAACE,MAAT,EACI,OAAON,EAAE,CAAC,IAAD,CAAT;;AACJ,aAASE,GAAT,CAAaK,CAAb,EAAgB;AACZH,MAAAA,GAAG,CAACG,CAAD,CAAH,CAAOJ,MAAP,EAAe,UAAUK,GAAV,EAAe;AAC1B;AACA,YAAIA,GAAJ,EACI,OAAOR,EAAE,CAACQ,GAAD,CAAT,CAHsB,CAI1B;;AACA,YAAI,CAACJ,GAAG,CAACG,CAAC,GAAG,CAAL,CAAR,EACI,OAAOP,EAAE,CAAC,IAAD,CAAT,CANsB,CAO1B;;AACAE,QAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH;AACH,OATD;AAUH;;AACDL,IAAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,EAAE,CAACC,IAAD,EAAO;AACL,WAAO,IAAIzB,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDW,EAAzD,CAA4DC,IAA5D,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,EAAE,CAACF,IAAD,EAAO;AACL,WAAO,IAAIzB,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDc,EAAzD,CAA4DF,IAA5D,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,MAAM,CAACH,IAAD,EAAO;AACT,WAAO,IAAIzB,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDe,MAAzD,CAAgEH,IAAhE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,IAAI,CAACC,MAAD,EAASC,KAAT,EAAgBhB,EAAhB,EAAoB;AACpBd,IAAAA,KAAK,CAAC,yBAAD,EAA4B,KAAKM,IAAjC,CAAL;AACA,UAAMW,MAAM,GAAG,IAAItB,QAAQ,CAACoC,MAAb,CAAoB,IAApB,EAA0BF,MAA1B,EAAkCC,KAAlC,CAAf;AACA,SAAKd,GAAL,CAASC,MAAT,EAAkBK,GAAD,IAAS;AACtBU,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACnB,YAAI,UAAUJ,MAAM,CAACK,IAAP,CAAYC,UAA1B,EAAsC;AAClC,cAAIb,GAAJ,EAAS;AACL,gBAAIO,MAAM,CAACK,IAAP,CAAYE,QAAZ,KAAyB,CAA7B,EAAgC;AAC5B,qBAAOnB,MAAM,CAACoB,MAAP,CAAcf,GAAG,CAACgB,IAAJ,IAAYhB,GAAG,CAACiB,OAA9B,CAAP;AACH,aAFD,MAGK;AACD,qBAAOtB,MAAM,CAACoB,MAAP,CAAc;AACjBE,gBAAAA,OAAO,EAAEjB,GAAG,CAACiB,OADI;AAEjBD,gBAAAA,IAAI,EAAEhB,GAAG,CAACgB;AAFO,eAAd,CAAP;AAIH;AACJ,WAXiC,CAYlC;;;AACA,eAAK/B,OAAL,CAAaiC,GAAb,CAAiBvB,MAAM,CAACwB,EAAxB,EAA4BxB,MAA5B,EAbkC,CAclC;AACA;AACA;AACA;;AACAA,UAAAA,MAAM,CAACyB,UAAP;;AACA,cAAI5B,EAAJ,EACIA,EAAE,GApB4B,CAqBlC;;AACA,eAAK6B,YAAL,CAAkB,SAAlB,EAA6B1B,MAA7B;AACA,eAAK0B,YAAL,CAAkB,YAAlB,EAAgC1B,MAAhC;AACH,SAxBD,MAyBK;AACDjB,UAAAA,KAAK,CAAC,uDAAD,CAAL;AACH;AACJ,OA7BD;AA8BH,KA/BD;AAgCA,WAAOiB,MAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI2B,EAAAA,OAAO,CAAC3B,MAAD,EAAS;AACZ,QAAI,KAAKV,OAAL,CAAasC,GAAb,CAAiB5B,MAAM,CAACwB,EAAxB,CAAJ,EAAiC;AAC7B,WAAKlC,OAAL,CAAauC,MAAb,CAAoB7B,MAAM,CAACwB,EAA3B;AACH,KAFD,MAGK;AACDzC,MAAAA,KAAK,CAAC,wBAAD,EAA2BiB,MAAM,CAACwB,EAAlC,CAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,IAAI,CAACC,EAAD,EAAc;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACd,WAAO,IAAIlD,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDmC,IAAzD,CAA8DC,EAA9D,EAAkE,GAAGC,IAArE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,GAAU;AAAA,uCAAND,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACV,SAAKF,IAAL,CAAU,SAAV,EAAqB,GAAGE,IAAxB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,GAAU;AAAA,uCAANF,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACX,SAAKF,IAAL,CAAU,SAAV,EAAqB,GAAGE,IAAxB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,cAAc,CAACJ,EAAD,EAAc;AACxB,QAAIzD,OAAO,CAACG,eAAR,CAAwBmD,GAAxB,CAA4BG,EAA5B,CAAJ,EAAqC;AACjC,YAAM,IAAIK,KAAJ,CAAW,IAAGL,EAAG,4BAAjB,CAAN;AACH;;AAHuB,uCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAIxBA,IAAAA,IAAI,CAACK,OAAL,CAAaN,EAAb;AACA,SAAKpC,OAAL,CAAawC,cAAb,CAA4BH,IAA5B;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,iBAAiB,CAACN,IAAD,EAAO;AACpB,UAAMO,WAAN,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8BR,IAA9B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,UAAU,GAAG;AACT,WAAO,IAAI3D,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyD8C,UAAzD,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACf,WAAO,IAAI5D,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyD+C,QAAzD,CAAkEA,QAAlE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,IAAI7D,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDgD,QAAhE;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACa,MAALC,KAAK,GAAG;AACR,WAAO,IAAI9D,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDiD,KAAhE;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACA,OAAD,EAAU;AACb,WAAO,IAAI/D,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDkD,OAAzD,CAAiEA,OAAjE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,GAAG;AACX,WAAO,IAAIhE,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDmD,YAAzD,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACxC,IAAD,EAAO;AACd,WAAO,IAAIzB,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDoD,WAAzD,CAAqExC,IAArE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIyC,EAAAA,YAAY,CAACzC,IAAD,EAAO;AACf,WAAO,IAAIzB,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDqD,YAAzD,CAAsEzC,IAAtE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI0C,EAAAA,iBAAiB,GAAgB;AAAA,QAAfC,KAAe,uEAAP,KAAO;AAC7B,WAAO,IAAIpE,oBAAoB,CAAC0B,iBAAzB,CAA2C,KAAKb,OAAhD,EAAyDsD,iBAAzD,CAA2EC,KAA3E,CAAP;AACH;;AArSqD;;AAuS1D5E,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\nclass Namespace extends typed_events_1.StrictEventEmitter {\n    /**\n     * Namespace constructor.\n     *\n     * @param server instance\n     * @param name\n     */\n    constructor(server, name) {\n        super();\n        this.sockets = new Map();\n        /** @private */\n        this._fns = [];\n        /** @private */\n        this._ids = 0;\n        this.server = server;\n        this.name = name;\n        this._initAdapter();\n    }\n    /**\n     * Initializes the `Adapter` for this nsp.\n     * Run upon changing adapter by `Server#adapter`\n     * in addition to the constructor.\n     *\n     * @private\n     */\n    _initAdapter() {\n        // @ts-ignore\n        this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Sets up namespace middleware.\n     *\n     * @return self\n     * @public\n     */\n    use(fn) {\n        this._fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n    run(socket, fn) {\n        const fns = this._fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](socket, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    to(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    in(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    except(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n    _add(client, query, fn) {\n        debug(\"adding socket to nsp %s\", this.name);\n        const socket = new socket_1.Socket(this, client, query);\n        this.run(socket, (err) => {\n            process.nextTick(() => {\n                if (\"open\" == client.conn.readyState) {\n                    if (err) {\n                        if (client.conn.protocol === 3) {\n                            return socket._error(err.data || err.message);\n                        }\n                        else {\n                            return socket._error({\n                                message: err.message,\n                                data: err.data,\n                            });\n                        }\n                    }\n                    // track socket\n                    this.sockets.set(socket.id, socket);\n                    // it's paramount that the internal `onconnect` logic\n                    // fires before user-set events to prevent state order\n                    // violations (such as a disconnection before the connection\n                    // logic is complete)\n                    socket._onconnect();\n                    if (fn)\n                        fn();\n                    // fire user-set events\n                    this.emitReserved(\"connect\", socket);\n                    this.emitReserved(\"connection\", socket);\n                }\n                else {\n                    debug(\"next called after client was closed - ignoring socket\");\n                }\n            });\n        });\n        return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            this.sockets.delete(socket.id);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @return Always true\n     * @public\n     */\n    emit(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Emit a packet to other Socket.IO servers\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     * @public\n     */\n    serverSideEmit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${ev}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        this.adapter.serverSideEmit(args);\n        return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n    _onServerSideEmit(args) {\n        super.emitUntyped.apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @return self\n     * @public\n     */\n    allSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return self\n     * @public\n     */\n    get volatile() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return self\n     * @public\n     */\n    get local() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * <pre><code>\n     *\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   // ...\n     * });\n     *\n     * </pre></code>\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @public\n     */\n    fetchSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsJoin(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsLeave(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param close - whether to close the underlying connection\n     * @public\n     */\n    disconnectSockets(close = false) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n}\nexports.Namespace = Namespace;\n"]},"metadata":{},"sourceType":"script"}