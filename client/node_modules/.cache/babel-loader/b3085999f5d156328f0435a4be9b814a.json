{"ast":null,"code":"// imported from https://github.com/galkn/parseuri\n\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\nexport function parse(str) {\n  const src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n  if (b != -1 && e != -1) {\n    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n  }\n\n  let m = re.exec(str || ''),\n      uri = {},\n      i = 14;\n\n  while (i--) {\n    uri[parts[i]] = m[i] || '';\n  }\n\n  if (b != -1 && e != -1) {\n    uri.source = src;\n    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n    uri.ipv6uri = true;\n  }\n\n  uri.pathNames = pathNames(uri, uri['path']);\n  uri.queryKey = queryKey(uri, uri['query']);\n  return uri;\n}\n\nfunction pathNames(obj, path) {\n  const regx = /\\/{2,9}/g,\n        names = path.replace(regx, \"/\").split(\"/\");\n\n  if (path.substr(0, 1) == '/' || path.length === 0) {\n    names.splice(0, 1);\n  }\n\n  if (path.substr(path.length - 1, 1) == '/') {\n    names.splice(names.length - 1, 1);\n  }\n\n  return names;\n}\n\nfunction queryKey(uri, query) {\n  const data = {};\n  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n    if ($1) {\n      data[$1] = $2;\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/engine.io-client/build/esm/contrib/parseuri.js"],"names":["re","parts","parse","str","src","b","indexOf","e","substring","replace","length","m","exec","uri","i","source","host","authority","ipv6uri","pathNames","queryKey","obj","path","regx","names","split","substr","splice","query","data","$0","$1","$2"],"mappings":"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","sourcesContent":["// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}