{"ast":null,"code":"/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\r\n * Parse the Accept-Charset header.\r\n * @private\r\n */\n\nfunction parseAcceptCharset(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var charset = parseCharset(accepts[i].trim(), i);\n\n    if (charset) {\n      accepts[j++] = charset;\n    }\n  } // trim accepts\n\n\n  accepts.length = j;\n  return accepts;\n}\n/**\r\n * Parse a charset from the Accept-Charset header.\r\n * @private\r\n */\n\n\nfunction parseCharset(str, i) {\n  var match = simpleCharsetRegExp.exec(str);\n  if (!match) return null;\n  var charset = match[1];\n  var q = 1;\n\n  if (match[2]) {\n    var params = match[2].split(';');\n\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    charset: charset,\n    q: q,\n    i: i\n  };\n}\n/**\r\n * Get the priority of a charset.\r\n * @private\r\n */\n\n\nfunction getCharsetPriority(charset, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(charset, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n/**\r\n * Get the specificity of the charset.\r\n * @private\r\n */\n\n\nfunction specify(charset, spec, index) {\n  var s = 0;\n\n  if (spec.charset.toLowerCase() === charset.toLowerCase()) {\n    s |= 1;\n  } else if (spec.charset !== '*') {\n    return null;\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n/**\r\n * Get the preferred charsets from an Accept-Charset header.\r\n * @public\r\n */\n\n\nfunction preferredCharsets(accept, provided) {\n  // RFC 2616 sec 14.2: no header = *\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all charsets\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getCharsetPriority(type, accepts, index);\n  }); // sorted list of accepted charsets\n\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n/**\r\n * Compare two specs.\r\n * @private\r\n */\n\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\r\n * Get full charset string.\r\n * @private\r\n */\n\n\nfunction getFullCharset(spec) {\n  return spec.charset;\n}\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\n\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}","map":{"version":3,"sources":["C:/Users/gabe/Desktop/Pomo/Team5/client/node_modules/negotiator/lib/charset.js"],"names":["module","exports","preferredCharsets","simpleCharsetRegExp","parseAcceptCharset","accept","accepts","split","i","j","length","charset","parseCharset","trim","str","match","exec","q","params","p","parseFloat","getCharsetPriority","accepted","index","priority","o","s","spec","specify","toLowerCase","provided","undefined","filter","isQuality","sort","compareSpecs","map","getFullCharset","priorities","getPriority","type","getCharset","indexOf","a","b"],"mappings":"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","sourcesContent":["/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredCharsets;\r\nmodule.exports.preferredCharsets = preferredCharsets;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept-Charset header.\r\n * @private\r\n */\r\n\r\nfunction parseAcceptCharset(accept) {\r\n  var accepts = accept.split(',');\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var charset = parseCharset(accepts[i].trim(), i);\r\n\r\n    if (charset) {\r\n      accepts[j++] = charset;\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse a charset from the Accept-Charset header.\r\n * @private\r\n */\r\n\r\nfunction parseCharset(str, i) {\r\n  var match = simpleCharsetRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var charset = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';')\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    charset: charset,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of a charset.\r\n * @private\r\n */\r\n\r\nfunction getCharsetPriority(charset, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(charset, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the charset.\r\n * @private\r\n */\r\n\r\nfunction specify(charset, spec, index) {\r\n  var s = 0;\r\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\r\n    s |= 1;\r\n  } else if (spec.charset !== '*' ) {\r\n    return null\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n}\r\n\r\n/**\r\n * Get the preferred charsets from an Accept-Charset header.\r\n * @public\r\n */\r\n\r\nfunction preferredCharsets(accept, provided) {\r\n  // RFC 2616 sec 14.2: no header = *\r\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all charsets\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullCharset);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getCharsetPriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted charsets\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full charset string.\r\n * @private\r\n */\r\n\r\nfunction getFullCharset(spec) {\r\n  return spec.charset;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}